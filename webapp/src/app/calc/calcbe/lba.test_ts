import { ErrEmpty, ErrInvCharges, ErrInvPts, ErrInvXp, ErrInvKings, ErrInvQueens, ErrImBxp, Request, WaveCounter, Hm1_9, Hm6_9, RoundMode, OrderItem, OrderItemKind, Nm1_10, Order, calcPointsRounds, calcBxpRounds, calcIMRounds, calcQueens, Hm10, calcKings, Process } from "./lba";
import { hm10Primary, hm10Secondary, hmPts, hmXp, LeechPriceDurTable, nm10Primary, nm10Secondary, nmPts, nmXp } from "./rates";
import { BxpCounter, Progress, PtsCounter, Role, RoleOrder, RoleSet, Skill } from "./types";

const ProgressNM1 = Progress.NM1
const ProgressHM1 = Progress.HM1
const ProgressHM6 = Progress.HM6
const ProgressHM10 = Progress.HM10

const Attacker = Role.Attacker
const Defender = Role.Defender
const Healer = Role.Healer
const Collector = Role.Collector

const Agility = Skill.Agility
const Firemaking = Skill.Firemaking
const Mining = Skill.Mining


const KindPoints = OrderItemKind.Points
const KindBxp = OrderItemKind.Bxp
const KindQueen = OrderItemKind.Queen
const KindHM10Unlock = OrderItemKind.HM10Unlock
const KindKing = OrderItemKind.King
const KindTicket = OrderItemKind.Ticket

let sum19att = 0;
let sum19def = 0;
let sum19heal = 0;
let sum19col = 0;
let sum69att = 0;
let sum69def = 0;
let sum69heal = 0;
let sum69col = 0;
let sum19agil = 0;
let sum19fm = 0;
let sum19min = 0;
let sum69agil = 0;
let sum69fm = 0;
let sum69min = 0;
let sumnmatt = 0;
let sumnmdef = 0;
let sumnmheal = 0;
let sumnmcol = 0;
let sumnm19att = 0;
let sumnm19def = 0;
let sumnm19heal = 0;
let sumnm19col = 0;
let sumnmagil = 0;
let sumnmfm = 0;
let sumnmmin = 0;

for (let i = 1; i < hmPts.length; i++) {
	sum19att += hmPts[i][Attacker]
	sum19def += hmPts[i][Defender]
	sum19heal += hmPts[i][Healer]
	sum19col += hmPts[i][Collector]

	if (i >= 6) {
		sum69att += hmPts[i][Attacker]
		sum69def += hmPts[i][Defender]
		sum69heal += hmPts[i][Healer]
		sum69col += hmPts[i][Collector]
	}
}

for (let i = 1; i < hmXp.length - 1; i++) {
	sum19agil += hmXp[i][Agility]
	sum19fm += hmXp[i][Firemaking]
	sum19min += hmXp[i][Mining]

	if (i >= 6) {
		sum69agil += hmXp[i][Agility]
		sum69fm += hmXp[i][Firemaking]
		sum69min += hmXp[i][Mining]
	}
}

for (let i = 1; i < nmPts.length; i++) {
	sumnmatt += nmPts[i][Attacker]
	sumnmdef += nmPts[i][Defender]
	sumnmheal += nmPts[i][Healer]
	sumnmcol += nmPts[i][Collector]
	sumnm19att += nmPts[i][Attacker]
	sumnm19def += nmPts[i][Defender]
	sumnm19heal += nmPts[i][Healer]
	sumnm19col += nmPts[i][Collector]
}
sumnmatt += nm10Primary
sumnmdef += nm10Primary
sumnmheal += nm10Primary
sumnmcol += nm10Primary

for (let i = 1; i < nmXp.length; i++) {
	sumnmagil += nmXp[i][Agility]
	sumnmfm += nmXp[i][Firemaking]
	sumnmmin += nmXp[i][Mining]
}


describe('Request_Valid', () => {
	type fields = {
		Ironman?: boolean;
		Progress?: Progress;
		Charges?: number;
		Pts?: PtsCounter;
		Bxp?: BxpCounter;
		King?: number;
		Queen?: number;
	}
	let tests: {
		name: string,
		fields: fields,
		wantErr: Error,
	}[] = [
			{ name: "rsn", fields: {}, wantErr: ErrEmpty },
			{ name: "empty", fields: { Progress: ProgressNM1 }, wantErr: ErrEmpty },
			{ name: "not empty, pts", fields: { Progress: ProgressNM1, Pts: new PtsCounter({ Attacker: 1 }) }, wantErr: undefined },
			{ name: "not empty, bxp", fields: { Progress: ProgressNM1, Bxp: new BxpCounter({ Agility: 1 }) }, wantErr: undefined },
			{ name: "not empty, queen", fields: { Progress: ProgressNM1, Queen: 1 }, wantErr: undefined },
			{ name: "not empty, king", fields: { Progress: ProgressNM1, King: 1 }, wantErr: undefined },

			{ name: "bogus charges", fields: { Progress: ProgressNM1, Charges: -9000 }, wantErr: ErrInvCharges },
			{ name: "bogus pts", fields: { Progress: ProgressNM1, Pts: new PtsCounter({ Attacker: -50 }) }, wantErr: ErrInvPts },
			{ name: "bogus pts", fields: { Progress: ProgressNM1, Pts: new PtsCounter({ Attacker: -50, Collector: 40 }) }, wantErr: ErrInvPts },
			{ name: "bogus xp", fields: { Progress: ProgressNM1, Bxp: new BxpCounter({ Agility: -50 }) }, wantErr: ErrInvXp },
			{ name: "bogus xp", fields: { Progress: ProgressNM1, Bxp: new BxpCounter({ Agility: -50, Firemaking: 40 }) }, wantErr: ErrInvXp },
			{ name: "bogus kings", fields: { Progress: ProgressNM1, King: -1 }, wantErr: ErrInvKings },
			{ name: "bogus queens", fields: { Progress: ProgressNM1, Queen: -1 }, wantErr: ErrInvQueens },

			{ name: "ironman bxp only", fields: { Ironman: true, Progress: ProgressNM1, Bxp: new BxpCounter({ Agility: 10 }) }, wantErr: ErrImBxp },
			{ name: "ironman bxp and points", fields: { Ironman: true, Progress: ProgressNM1, Pts: new PtsCounter({ Attacker: 1 }), Bxp: new BxpCounter({ Agility: 10 }) }, wantErr: ErrImBxp },

			{ name: "points", fields: { Progress: ProgressNM1, Pts: new PtsCounter({ Attacker: 1 }) }, wantErr: undefined },
			{ name: "ironman points", fields: { Ironman: true, Progress: ProgressNM1, Pts: new PtsCounter({ Attacker: 1 }) }, wantErr: undefined },
			{ name: "bxp", fields: { Progress: ProgressNM1, Bxp: new BxpCounter({ Agility: 10 }) }, wantErr: undefined },
			{ name: "pts & bxp", fields: { Progress: ProgressNM1, Pts: new PtsCounter({ Attacker: 1 }), Bxp: new BxpCounter({ Agility: 10 }) }, wantErr: undefined },
		];

	tests.forEach(tt => {
		test(tt.name, () => {
			let r = new Request(tt.fields)
			expect(r.Valid()).toEqual(tt.wantErr)
		})
	});
});

describe('WaveCounter_Next', () => {
	let mode19ctr = new WaveCounter(Hm1_9)
	let mode69ctr = new WaveCounter(Hm6_9)

	let tests: {
		name: string,
		ctr: WaveCounter,
		wantCurrent: number,
		wantCount: number,
	}[] = [
			{ name: "(0) 1-9 - 0", ctr: mode19ctr, wantCurrent: 1, wantCount: 1 },
			{ name: "(0) 1-9 - 1", ctr: mode19ctr, wantCurrent: 2, wantCount: 1 },
			{ name: "(0) 1-9 - 2", ctr: mode19ctr, wantCurrent: 3, wantCount: 1 },
			{ name: "(0) 1-9 - 3", ctr: mode19ctr, wantCurrent: 4, wantCount: 1 },
			{ name: "(0) 1-9 - 4", ctr: mode19ctr, wantCurrent: 5, wantCount: 1 },
			{ name: "(0) 1-9 - 5", ctr: mode19ctr, wantCurrent: 6, wantCount: 1 },
			{ name: "(0) 1-9 - 6", ctr: mode19ctr, wantCurrent: 7, wantCount: 1 },
			{ name: "(0) 1-9 - 7", ctr: mode19ctr, wantCurrent: 8, wantCount: 1 },
			{ name: "(0) 1-9 - 8", ctr: mode19ctr, wantCurrent: 9, wantCount: 1 },
			{ name: "(1) 1-9 - 9", ctr: mode19ctr, wantCurrent: 1, wantCount: 2 },
			{ name: "(1) 1-9 - 1", ctr: mode19ctr, wantCurrent: 2, wantCount: 2 },
			{ name: "(1) 1-9 - 2", ctr: mode19ctr, wantCurrent: 3, wantCount: 2 },
			{ name: "(1) 1-9 - 3", ctr: mode19ctr, wantCurrent: 4, wantCount: 2 },
			{ name: "(1) 1-9 - 4", ctr: mode19ctr, wantCurrent: 5, wantCount: 2 },
			{ name: "(1) 1-9 - 5", ctr: mode19ctr, wantCurrent: 6, wantCount: 2 },
			{ name: "(1) 1-9 - 6", ctr: mode19ctr, wantCurrent: 7, wantCount: 2 },
			{ name: "(1) 1-9 - 7", ctr: mode19ctr, wantCurrent: 8, wantCount: 2 },
			{ name: "(1) 1-9 - 8", ctr: mode19ctr, wantCurrent: 9, wantCount: 2 },
			{ name: "(2) 1-9 - 9", ctr: mode19ctr, wantCurrent: 1, wantCount: 3 },
			{ name: "(2) 1-9 - 1", ctr: mode19ctr, wantCurrent: 2, wantCount: 3 },
			{ name: "(2) 1-9 - 2", ctr: mode19ctr, wantCurrent: 3, wantCount: 3 },
			{ name: "(2) 1-9 - 3", ctr: mode19ctr, wantCurrent: 4, wantCount: 3 },
			{ name: "(2) 1-9 - 4", ctr: mode19ctr, wantCurrent: 5, wantCount: 3 },
			{ name: "(2) 1-9 - 5", ctr: mode19ctr, wantCurrent: 6, wantCount: 3 },
			{ name: "(2) 1-9 - 6", ctr: mode19ctr, wantCurrent: 7, wantCount: 3 },
			{ name: "(2) 1-9 - 7", ctr: mode19ctr, wantCurrent: 8, wantCount: 3 },
			{ name: "(2) 1-9 - 8", ctr: mode19ctr, wantCurrent: 9, wantCount: 3 },
			{ name: "(2) 1-9 - 9", ctr: mode19ctr, wantCurrent: 1, wantCount: 4 },

			{ name: "(0) 6-9 - 0", ctr: mode69ctr, wantCurrent: 6, wantCount: 1 },
			{ name: "(0) 6-9 - 6", ctr: mode69ctr, wantCurrent: 7, wantCount: 1 },
			{ name: "(0) 6-9 - 7", ctr: mode69ctr, wantCurrent: 8, wantCount: 1 },
			{ name: "(0) 6-9 - 8", ctr: mode69ctr, wantCurrent: 9, wantCount: 1 },
			{ name: "(1) 6-9 - 9", ctr: mode69ctr, wantCurrent: 6, wantCount: 2 },
			{ name: "(1) 6-9 - 6", ctr: mode69ctr, wantCurrent: 7, wantCount: 2 },
			{ name: "(1) 6-9 - 7", ctr: mode69ctr, wantCurrent: 8, wantCount: 2 },
			{ name: "(1) 6-9 - 8", ctr: mode69ctr, wantCurrent: 9, wantCount: 2 },
			{ name: "(2) 6-9 - 9", ctr: mode69ctr, wantCurrent: 6, wantCount: 3 },
			{ name: "(2) 6-9 - 6", ctr: mode69ctr, wantCurrent: 7, wantCount: 3 },
			{ name: "(2) 6-9 - 7", ctr: mode69ctr, wantCurrent: 8, wantCount: 3 },
			{ name: "(2) 6-9 - 8", ctr: mode69ctr, wantCurrent: 9, wantCount: 3 },
			{ name: "(2) 6-9 - 9", ctr: mode69ctr, wantCurrent: 6, wantCount: 4 },
		];

	tests.forEach(tt => {
		test(tt.name, () => {
			let gotCurrent = tt.ctr.Next()

			expect(gotCurrent).toEqual(tt.wantCurrent)
			expect(tt.ctr.Current).toEqual(tt.wantCurrent)
			expect(tt.ctr.Count).toEqual(tt.wantCount)
		})
	})
});

describe('WaveCounter_SpareWaves', () => {
	type fields = {
		RoundMode?: RoundMode;
		Current?: number;
		Count?: number;
	}
	let tests: {
		name: string
		fields: fields
		want: number
	}[] = [
			{ name: "1-9 - 0", fields: { RoundMode: Hm1_9, Current: 0 }, want: 9 },
			{ name: "1-9 - 1", fields: { RoundMode: Hm1_9, Current: 1 }, want: 8 },
			{ name: "1-9 - 2", fields: { RoundMode: Hm1_9, Current: 2 }, want: 7 },
			{ name: "1-9 - 3", fields: { RoundMode: Hm1_9, Current: 3 }, want: 6 },
			{ name: "1-9 - 4", fields: { RoundMode: Hm1_9, Current: 4 }, want: 5 },
			{ name: "1-9 - 5", fields: { RoundMode: Hm1_9, Current: 5 }, want: 4 },
			{ name: "1-9 - 6", fields: { RoundMode: Hm1_9, Current: 6 }, want: 3 },
			{ name: "1-9 - 7", fields: { RoundMode: Hm1_9, Current: 7 }, want: 2 },
			{ name: "1-9 - 8", fields: { RoundMode: Hm1_9, Current: 8 }, want: 1 },
			{ name: "1-9 - 9", fields: { RoundMode: Hm1_9, Current: 9 }, want: 0 },

			{ name: "6-9 - 0", fields: { RoundMode: Hm6_9, Current: 0 }, want: 4 },
			{ name: "6-9 - 6", fields: { RoundMode: Hm6_9, Current: 6 }, want: 3 },
			{ name: "6-9 - 7", fields: { RoundMode: Hm6_9, Current: 7 }, want: 2 },
			{ name: "6-9 - 8", fields: { RoundMode: Hm6_9, Current: 8 }, want: 1 },
			{ name: "6-9 - 9", fields: { RoundMode: Hm6_9, Current: 9 }, want: 0 },
		];

	tests.forEach(tt => {
		test(tt.name, () => {
			let w = new WaveCounter(tt.fields.RoundMode)
			w.Current = tt.fields.Current
			w.Count = tt.fields.Count
			expect(w.SpareWaves()).toEqual(tt.want)
		})
	})
});

describe('OrderItem_Merge', () => {
	let tests: {
		name: string
		item: OrderItem
		other: OrderItem
		want: OrderItem
		wantOk: boolean
	}[] = [
			{
				name: "empty",
				item: new OrderItem(),
				other: new OrderItem(),
				want: new OrderItem(),
				wantOk: true,
			},
			{
				name: "same kind, same mode",
				item: new OrderItem({
					Kind: OrderItemKind.Queen,
					Mode: Nm1_10,
					Count: 1,
					Roles: new RoleSet(Collector),
					ChargesConsumed: 2,
					PtsGained: new PtsCounter({ Attacker: 3, Defender: 4, Healer: 5, Collector: 6 }),
					PtsWaves: new PtsCounter({ Attacker: 7, Defender: 8, Healer: 9, Collector: 10 }),
					BxpGained: new BxpCounter({ Agility: 11, Firemaking: 12, Mining: 13 }),
					BxpWaves: new BxpCounter({ Agility: 14, Firemaking: 15, Mining: 16 }),
					Queens: 17,
					Kings: 18,
					SpareWaves: 19,
				}),
				other: new OrderItem({
					Kind: OrderItemKind.Queen,
					Mode: Nm1_10,
					Count: 1,
					Roles: new RoleSet(Defender),
					ChargesConsumed: 1,
					PtsGained: new PtsCounter({ Attacker: 1, Defender: 1, Healer: 1, Collector: 1 }),
					PtsWaves: new PtsCounter({ Attacker: 1, Defender: 1, Healer: 1, Collector: 1 }),
					BxpGained: new BxpCounter({ Agility: 1, Firemaking: 1, Mining: 1 }),
					BxpWaves: new BxpCounter({ Agility: 1, Firemaking: 1, Mining: 1 }),
					Queens: 1,
					Kings: 1,
					SpareWaves: 1,
				}),
				want: new OrderItem({
					Kind: OrderItemKind.Queen,
					Mode: Nm1_10,
					Count: 2,
					Roles: new RoleSet(Collector, Defender),
					ChargesConsumed: 3,
					PtsGained: new PtsCounter({ Attacker: 4, Defender: 5, Healer: 6, Collector: 7 }),
					PtsWaves: new PtsCounter({ Attacker: 8, Defender: 9, Healer: 10, Collector: 11 }),
					BxpGained: new BxpCounter({ Agility: 12, Firemaking: 13, Mining: 14 }),
					BxpWaves: new BxpCounter({ Agility: 15, Firemaking: 16, Mining: 17 }),
					Queens: 18,
					Kings: 19,
					SpareWaves: 20,
				}),
				wantOk: true,
			},
			{
				name: "same kind, different mode",
				item: new OrderItem({
					Kind: OrderItemKind.Queen,
					Mode: Nm1_10,
					Count: 1,
					Roles: new RoleSet(Collector),
					ChargesConsumed: 2,
					PtsGained: new PtsCounter({ Attacker: 3, Defender: 4, Healer: 5, Collector: 6 }),
					PtsWaves: new PtsCounter({ Attacker: 7, Defender: 8, Healer: 9, Collector: 10 }),
					BxpGained: new BxpCounter({ Agility: 11, Firemaking: 12, Mining: 13 }),
					BxpWaves: new BxpCounter({ Agility: 14, Firemaking: 15, Mining: 16 }),
					Queens: 17,
					Kings: 18,
					SpareWaves: 19,
				}),
				other: new OrderItem({
					Kind: OrderItemKind.Queen,
					Mode: Hm1_9,
					Count: 1,
					Roles: new RoleSet(Defender),
					ChargesConsumed: 1,
					PtsGained: new PtsCounter({ Attacker: 1, Defender: 1, Healer: 1, Collector: 1 }),
					PtsWaves: new PtsCounter({ Attacker: 1, Defender: 1, Healer: 1, Collector: 1 }),
					BxpGained: new BxpCounter({ Agility: 1, Firemaking: 1, Mining: 1 }),
					BxpWaves: new BxpCounter({ Agility: 1, Firemaking: 1, Mining: 1 }),
					Queens: 1,
					Kings: 1,
					SpareWaves: 1,
				}),
				want: new OrderItem(),
				wantOk: false,
			},
			{
				name: "different kind, same mode",
				item: new OrderItem({
					Kind: OrderItemKind.HM10Unlock,
					Mode: Nm1_10,
					Count: 1,
					Roles: new RoleSet(Collector),
					ChargesConsumed: 2,
					PtsGained: new PtsCounter({ Attacker: 3, Defender: 4, Healer: 5, Collector: 6 }),
					PtsWaves: new PtsCounter({ Attacker: 7, Defender: 8, Healer: 9, Collector: 10 }),
					BxpGained: new BxpCounter({ Agility: 11, Firemaking: 12, Mining: 13 }),
					BxpWaves: new BxpCounter({ Agility: 14, Firemaking: 15, Mining: 16 }),
					Queens: 17,
					Kings: 18,
					SpareWaves: 19,
				}),
				other: new OrderItem({
					Kind: OrderItemKind.Queen,
					Mode: Nm1_10,
					Count: 1,
					Roles: new RoleSet(Defender),
					ChargesConsumed: 1,
					PtsGained: new PtsCounter({ Attacker: 1, Defender: 1, Healer: 1, Collector: 1 }),
					PtsWaves: new PtsCounter({ Attacker: 1, Defender: 1, Healer: 1, Collector: 1 }),
					BxpGained: new BxpCounter({ Agility: 1, Firemaking: 1, Mining: 1 }),
					BxpWaves: new BxpCounter({ Agility: 1, Firemaking: 1, Mining: 1 }),
					Queens: 1,
					Kings: 1,
					SpareWaves: 1,
				}),
				want: new OrderItem(),
				wantOk: false,
			},
			{
				name: "different kind, different mode",
				item: new OrderItem({
					Kind: OrderItemKind.HM10Unlock,
					Mode: Nm1_10,
					Count: 1,
					Roles: new RoleSet(Collector),
					ChargesConsumed: 2,
					PtsGained: new PtsCounter({ Attacker: 3, Defender: 4, Healer: 5, Collector: 6 }),
					PtsWaves: new PtsCounter({ Attacker: 7, Defender: 8, Healer: 9, Collector: 10 }),
					BxpGained: new BxpCounter({ Agility: 11, Firemaking: 12, Mining: 13 }),
					BxpWaves: new BxpCounter({ Agility: 14, Firemaking: 15, Mining: 16 }),
					Queens: 17,
					Kings: 18,
					SpareWaves: 19,
				}),
				other: new OrderItem({
					Kind: OrderItemKind.Queen,
					Mode: Hm1_9,
					Count: 1,
					Roles: new RoleSet(Defender),
					ChargesConsumed: 1,
					PtsGained: new PtsCounter({ Attacker: 1, Defender: 1, Healer: 1, Collector: 1 }),
					PtsWaves: new PtsCounter({ Attacker: 1, Defender: 1, Healer: 1, Collector: 1 }),
					BxpGained: new BxpCounter({ Agility: 1, Firemaking: 1, Mining: 1 }),
					BxpWaves: new BxpCounter({ Agility: 1, Firemaking: 1, Mining: 1 }),
					Queens: 1,
					Kings: 1,
					SpareWaves: 1,
				}),
				want: new OrderItem(),
				wantOk: false,
			},
		];

	tests.forEach(tt => {
		test(tt.name, () => {
			let { result, ok } = tt.item.Merge(tt.other)
			expect(result).toEqual(tt.want)
			expect(ok).toEqual(tt.wantOk)
		})
	})
});

describe('Order_Add', () => {
	let tests: {
		name: string
		order: Order
		item: OrderItem
		want: Order
	}[] = [
			{
				name: "empty",
				order: new Order(),
				item: new OrderItem(),
				want: new Order(),
			},
			{
				name: "same kind, same mode",
				order: new Order({
					Breakdown: [
						new OrderItem({ Kind: KindQueen, Mode: Nm1_10, Count: 1 }),
					]
				}),
				item: new OrderItem({ Kind: KindQueen, Mode: Nm1_10, Count: 1 }),
				want: new Order({
					Breakdown: [
						new OrderItem({ Kind: KindQueen, Mode: Nm1_10, Count: 2 }),
					]
				}),
			},
			{
				name: "same kind, same mode - 2",
				order: new Order({
					Breakdown: [
						new OrderItem({ Kind: KindBxp, Mode: Nm1_10, Count: 1 }),
						new OrderItem({ Kind: KindQueen, Mode: Nm1_10, Count: 1 }),
						new OrderItem({ Kind: KindPoints, Mode: Nm1_10, Count: 1 }),
					]
				}),
				item: new OrderItem({
					Kind: KindQueen, Mode: Nm1_10, Count: 1,
				}),
				want: new Order({
					Breakdown: [
						new OrderItem({ Kind: KindBxp, Mode: Nm1_10, Count: 1 }),
						new OrderItem({ Kind: KindQueen, Mode: Nm1_10, Count: 2 }),
						new OrderItem({ Kind: KindPoints, Mode: Nm1_10, Count: 1 }),
					]
				}),
			},
			{
				name: "same kind, different mode",
				order: new Order({
					Breakdown: [
						new OrderItem({ Kind: KindPoints, Mode: Hm1_9, Count: 1 }),
					]
				}),
				item: new OrderItem({
					Kind: KindPoints, Mode: Hm6_9, Count: 1,
				}),
				want: new Order({
					Breakdown: [
						new OrderItem({ Kind: KindPoints, Mode: Hm1_9, Count: 1 }),
						new OrderItem({ Kind: KindPoints, Mode: Hm6_9, Count: 1 }),
					]
				}),
			},
			{
				name: "same kind, different mode - 2",
				order: new Order({
					Breakdown: [
						new OrderItem({ Kind: KindBxp, Mode: Nm1_10, Count: 1 }),
						new OrderItem({ Kind: KindQueen, Mode: Nm1_10, Count: 2 }),
						new OrderItem({ Kind: KindPoints, Mode: Hm1_9, Count: 1 }),
					]
				}),
				item: new OrderItem({
					Kind: KindPoints, Mode: Hm6_9, Count: 1,
				}),
				want: new Order({
					Breakdown: [
						new OrderItem({ Kind: KindBxp, Mode: Nm1_10, Count: 1 }),
						new OrderItem({ Kind: KindQueen, Mode: Nm1_10, Count: 2 }),
						new OrderItem({ Kind: KindPoints, Mode: Hm1_9, Count: 1 }),
						new OrderItem({ Kind: KindPoints, Mode: Hm6_9, Count: 1 }),
					]
				}),
			},
			{
				name: "different kind, same mode",
				order: new Order({
					Breakdown: [
						new OrderItem({ Kind: KindPoints, Mode: Hm6_9, Count: 1 }),
					]
				}),
				item: new OrderItem({
					Kind: KindBxp, Mode: Hm6_9, Count: 1,
				}),
				want: new Order({
					Breakdown: [
						new OrderItem({ Kind: KindPoints, Mode: Hm6_9, Count: 1 }),
						new OrderItem({ Kind: KindBxp, Mode: Hm6_9, Count: 1 }),
					]
				}),
			},
			{
				name: "different kind, different mode",
				order: new Order({
					Breakdown: [
						new OrderItem({ Kind: KindQueen, Mode: Hm1_9, Count: 1 }),
					]
				}),
				item: new OrderItem({
					Kind: KindTicket, Mode: Nm1_10, Count: 1,
				}),
				want: new Order({
					Breakdown: [
						new OrderItem({ Kind: KindQueen, Mode: Hm1_9, Count: 1 }),
						new OrderItem({ Kind: KindTicket, Mode: Nm1_10, Count: 1 }),
					]
				}),
			},
		];

	tests.forEach(tt => {
		test(tt.name, () => {
			tt.order.Add(tt.item)
			expect(tt.order).toEqual(tt.want)
		})
	})
});

describe('calcPointsRounds', () => {
	type test = {
		name: string
		req: Request
		want: OrderItem
	}

	let sum = function (from: number, to: number, ...rr: Role[]): number {
		let r: Role = 0;
		if (rr.length > 0) {
			r = rr[0]
		} else {
			r = Attacker
		}
		let total = 0
		for (let i = from; i <= to; i++) {
			total += hmPts[i][r]
		}
		return total
	}

	let execute = function (tt: test, mode: RoundMode): () => void {
		return () => {
			let ctr = new WaveCounter(mode)
			let got = calcPointsRounds(tt.req, ctr, RoleOrder.Standard)
			expect(got).toEqual(tt.want)
		}
	}

	describe("1-9 pts", () => {
		let tests: test[] = [
			{ name: "noop", req: new Request(), want: new OrderItem() },

			{ name: "< wave 1", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 1) - 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 1, PtsWaves: new PtsCounter({ Attacker: 1 }), PtsGained: new PtsCounter({ Attacker: sum(1, 1) }) }) },
			{ name: "= wave 1", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 1) + 0 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 1, PtsWaves: new PtsCounter({ Attacker: 1 }), PtsGained: new PtsCounter({ Attacker: sum(1, 1) }) }) },
			{ name: "> wave 1", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 1) + 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 2, PtsWaves: new PtsCounter({ Attacker: 2 }), PtsGained: new PtsCounter({ Attacker: sum(1, 2) }) }) },

			{ name: "< wave 2", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 2) - 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 2, PtsWaves: new PtsCounter({ Attacker: 2 }), PtsGained: new PtsCounter({ Attacker: sum(1, 2) }) }) },
			{ name: "= wave 2", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 2) + 0 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 2, PtsWaves: new PtsCounter({ Attacker: 2 }), PtsGained: new PtsCounter({ Attacker: sum(1, 2) }) }) },
			{ name: "> wave 2", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 2) + 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 3, PtsWaves: new PtsCounter({ Attacker: 3 }), PtsGained: new PtsCounter({ Attacker: sum(1, 3) }) }) },

			{ name: "< wave 3", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 3) - 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 3, PtsWaves: new PtsCounter({ Attacker: 3 }), PtsGained: new PtsCounter({ Attacker: sum(1, 3) }) }) },
			{ name: "= wave 3", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 3) + 0 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 3, PtsWaves: new PtsCounter({ Attacker: 3 }), PtsGained: new PtsCounter({ Attacker: sum(1, 3) }) }) },
			{ name: "> wave 3", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 3) + 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 4, PtsWaves: new PtsCounter({ Attacker: 4 }), PtsGained: new PtsCounter({ Attacker: sum(1, 4) }) }) },

			{ name: "< wave 4", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 4) - 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 4, PtsWaves: new PtsCounter({ Attacker: 4 }), PtsGained: new PtsCounter({ Attacker: sum(1, 4) }) }) },
			{ name: "= wave 4", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 4) + 0 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 4, PtsWaves: new PtsCounter({ Attacker: 4 }), PtsGained: new PtsCounter({ Attacker: sum(1, 4) }) }) },
			{ name: "> wave 4", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 4) + 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 5, PtsWaves: new PtsCounter({ Attacker: 5 }), PtsGained: new PtsCounter({ Attacker: sum(1, 5) }) }) },

			{ name: "< wave 5", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 5) - 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 5, PtsWaves: new PtsCounter({ Attacker: 5 }), PtsGained: new PtsCounter({ Attacker: sum(1, 5) }) }) },
			{ name: "= wave 5", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 5) + 0 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 5, PtsWaves: new PtsCounter({ Attacker: 5 }), PtsGained: new PtsCounter({ Attacker: sum(1, 5) }) }) },
			{ name: "> wave 5", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 5) + 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 6, PtsWaves: new PtsCounter({ Attacker: 6 }), PtsGained: new PtsCounter({ Attacker: sum(1, 6) }) }) },

			{ name: "< wave 6", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 6) - 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 6, PtsWaves: new PtsCounter({ Attacker: 6 }), PtsGained: new PtsCounter({ Attacker: sum(1, 6) }) }) },
			{ name: "= wave 6", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 6) + 0 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 6, PtsWaves: new PtsCounter({ Attacker: 6 }), PtsGained: new PtsCounter({ Attacker: sum(1, 6) }) }) },
			{ name: "> wave 6", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 6) + 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 7, PtsWaves: new PtsCounter({ Attacker: 7 }), PtsGained: new PtsCounter({ Attacker: sum(1, 7) }) }) },

			{ name: "< wave 7", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 7) - 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 7, PtsWaves: new PtsCounter({ Attacker: 7 }), PtsGained: new PtsCounter({ Attacker: sum(1, 7) }) }) },
			{ name: "= wave 7", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 7) + 0 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 7, PtsWaves: new PtsCounter({ Attacker: 7 }), PtsGained: new PtsCounter({ Attacker: sum(1, 7) }) }) },
			{ name: "> wave 7", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 7) + 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 8, PtsWaves: new PtsCounter({ Attacker: 8 }), PtsGained: new PtsCounter({ Attacker: sum(1, 8) }) }) },

			{ name: "< wave 8", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 8) - 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 8, PtsWaves: new PtsCounter({ Attacker: 8 }), PtsGained: new PtsCounter({ Attacker: sum(1, 8) }) }) },
			{ name: "= wave 8", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 8) + 0 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 8, PtsWaves: new PtsCounter({ Attacker: 8 }), PtsGained: new PtsCounter({ Attacker: sum(1, 8) }) }) },
			{ name: "> wave 8", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 8) + 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 9, PtsWaves: new PtsCounter({ Attacker: 9 }), PtsGained: new PtsCounter({ Attacker: sum(1, 9) }) }) },

			{ name: "< wave 9", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 9) - 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 9, PtsWaves: new PtsCounter({ Attacker: 9 }), PtsGained: new PtsCounter({ Attacker: sum(1, 9) }) }) },
			{ name: "= wave 9", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 9) + 0 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 9, PtsWaves: new PtsCounter({ Attacker: 9 }), PtsGained: new PtsCounter({ Attacker: sum(1, 9) }) }) },
			{ name: "> wave 9", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 9) + 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 2, Roles: new RoleSet(Attacker), SpareWaves: 9 - 1, PtsWaves: new PtsCounter({ Attacker: 10 }), PtsGained: new PtsCounter({ Attacker: sum(1, 9) + sum(1, 1) }) }) },

			{ name: "> wave 9 Defender", req: new Request({ Pts: new PtsCounter({ Defender: sum(1, 9, Defender) + 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 2, Roles: new RoleSet(Defender), SpareWaves: 9 - 1, PtsWaves: new PtsCounter({ Defender: 10 }), PtsGained: new PtsCounter({ Defender: sum(1, 9, Defender) + sum(1, 1, Defender) }) }) },
			{ name: "> wave 9 Healer", req: new Request({ Pts: new PtsCounter({ Healer: sum(1, 9, Healer) + 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 2, Roles: new RoleSet(Healer), SpareWaves: 9 - 1, PtsWaves: new PtsCounter({ Healer: 10 }), PtsGained: new PtsCounter({ Healer: sum(1, 9, Healer) + sum(1, 1, Healer) }) }) },
			{ name: "> wave 9 Collector", req: new Request({ Pts: new PtsCounter({ Collector: sum(1, 9, Collector) + 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 2, Roles: new RoleSet(Collector), SpareWaves: 9 - 1, PtsWaves: new PtsCounter({ Collector: 10 }), PtsGained: new PtsCounter({ Collector: sum(1, 9, Collector) + sum(1, 1, Collector) }) }) },

			{ name: "exact overflow", req: new Request({ Pts: new PtsCounter({ Attacker: sum(1, 9, Attacker) + sum(1, 1, Attacker) }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 2, Roles: new RoleSet(Attacker), SpareWaves: 9 - 1, PtsWaves: new PtsCounter({ Attacker: 10 }), PtsGained: new PtsCounter({ Attacker: sum(1, 9) + sum(1, 1) }) }) },

			// // enhancers
			{ name: "e < wave 1   ", req: new Request({ Charges: 1, Pts: new PtsCounter({ Attacker: 2 * sum(1, 1) - 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 1, ChargesConsumed: 1 - 0, PtsWaves: new PtsCounter({ Attacker: 1 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 1) }) }) },
			{ name: "e = wave 1   ", req: new Request({ Charges: 1, Pts: new PtsCounter({ Attacker: 2 * sum(1, 1) + 0 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 1, ChargesConsumed: 1 - 0, PtsWaves: new PtsCounter({ Attacker: 1 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 1) }) }) },
			{ name: "e > wave 1   ", req: new Request({ Charges: 1, Pts: new PtsCounter({ Attacker: 2 * sum(1, 1) + 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 2, ChargesConsumed: 1 - 0, PtsWaves: new PtsCounter({ Attacker: 2 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 1) + sum(2, 2) }) }) },
			{ name: "+e < wave 1  ", req: new Request({ Charges: 2, Pts: new PtsCounter({ Attacker: 2 * sum(1, 1) - 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 1, ChargesConsumed: 2 - 1, PtsWaves: new PtsCounter({ Attacker: 1 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 1) }) }) },
			{ name: "+e = wave 1  ", req: new Request({ Charges: 2, Pts: new PtsCounter({ Attacker: 2 * sum(1, 1) + 0 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 1, ChargesConsumed: 2 - 1, PtsWaves: new PtsCounter({ Attacker: 1 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 1) }) }) },
			{ name: "+e > wave 1  ", req: new Request({ Charges: 2, Pts: new PtsCounter({ Attacker: 2 * sum(1, 1) + 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 2, ChargesConsumed: 2 - 0, PtsWaves: new PtsCounter({ Attacker: 2 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 1) + 2 * sum(2, 2) }) }) },
			{ name: "+e = wave 1+2", req: new Request({ Charges: 2, Pts: new PtsCounter({ Attacker: 2 * sum(1, 1) + sum(2, 2) }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 2, ChargesConsumed: 2 - 0, PtsWaves: new PtsCounter({ Attacker: 2 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 1) + 2 * sum(2, 2) }) }) },

			{ name: "e < wave 2   ", req: new Request({ Charges: 2, Pts: new PtsCounter({ Attacker: 2 * sum(1, 2) - 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 2, ChargesConsumed: 2 - 0, PtsWaves: new PtsCounter({ Attacker: 2 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 2) }) }) },
			{ name: "e = wave 2   ", req: new Request({ Charges: 2, Pts: new PtsCounter({ Attacker: 2 * sum(1, 2) + 0 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 2, ChargesConsumed: 2 - 0, PtsWaves: new PtsCounter({ Attacker: 2 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 2) }) }) },
			{ name: "e > wave 2   ", req: new Request({ Charges: 2, Pts: new PtsCounter({ Attacker: 2 * sum(1, 2) + 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 3, ChargesConsumed: 2 - 0, PtsWaves: new PtsCounter({ Attacker: 3 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 2) + sum(3, 3) }) }) },
			{ name: "+e < wave 2  ", req: new Request({ Charges: 3, Pts: new PtsCounter({ Attacker: 2 * sum(1, 2) - 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 2, ChargesConsumed: 3 - 1, PtsWaves: new PtsCounter({ Attacker: 2 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 2) }) }) },
			{ name: "+e = wave 2  ", req: new Request({ Charges: 3, Pts: new PtsCounter({ Attacker: 2 * sum(1, 2) + 0 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 2, ChargesConsumed: 3 - 1, PtsWaves: new PtsCounter({ Attacker: 2 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 2) }) }) },
			{ name: "+e > wave 2  ", req: new Request({ Charges: 3, Pts: new PtsCounter({ Attacker: 2 * sum(1, 2) + 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 3, ChargesConsumed: 3 - 0, PtsWaves: new PtsCounter({ Attacker: 3 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 2) + 2 * sum(3, 3) }) }) },
			{ name: "+e = wave 2+3", req: new Request({ Charges: 3, Pts: new PtsCounter({ Attacker: 2 * sum(1, 2) + sum(3, 3) }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 3, ChargesConsumed: 3 - 0, PtsWaves: new PtsCounter({ Attacker: 3 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 2) + 2 * sum(3, 3) }) }) },

			{ name: "e < wave 3   ", req: new Request({ Charges: 3, Pts: new PtsCounter({ Attacker: 2 * sum(1, 3) - 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 3, ChargesConsumed: 3 - 0, PtsWaves: new PtsCounter({ Attacker: 3 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 3) }) }) },
			{ name: "e = wave 3   ", req: new Request({ Charges: 3, Pts: new PtsCounter({ Attacker: 2 * sum(1, 3) + 0 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 3, ChargesConsumed: 3 - 0, PtsWaves: new PtsCounter({ Attacker: 3 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 3) }) }) },
			{ name: "e > wave 3   ", req: new Request({ Charges: 3, Pts: new PtsCounter({ Attacker: 2 * sum(1, 3) + 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 4, ChargesConsumed: 3 - 0, PtsWaves: new PtsCounter({ Attacker: 4 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 3) + sum(4, 4) }) }) },
			{ name: "+e < wave 3  ", req: new Request({ Charges: 4, Pts: new PtsCounter({ Attacker: 2 * sum(1, 3) - 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 3, ChargesConsumed: 4 - 1, PtsWaves: new PtsCounter({ Attacker: 3 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 3) }) }) },
			{ name: "+e = wave 3  ", req: new Request({ Charges: 4, Pts: new PtsCounter({ Attacker: 2 * sum(1, 3) + 0 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 3, ChargesConsumed: 4 - 1, PtsWaves: new PtsCounter({ Attacker: 3 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 3) }) }) },
			{ name: "+e > wave 3  ", req: new Request({ Charges: 4, Pts: new PtsCounter({ Attacker: 2 * sum(1, 3) + 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 4, ChargesConsumed: 4 - 0, PtsWaves: new PtsCounter({ Attacker: 4 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 3) + 2 * sum(4, 4) }) }) },
			{ name: "+e = wave 3+4", req: new Request({ Charges: 4, Pts: new PtsCounter({ Attacker: 2 * sum(1, 3) + sum(4, 4) }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 4, ChargesConsumed: 4 - 0, PtsWaves: new PtsCounter({ Attacker: 4 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 3) + 2 * sum(4, 4) }) }) },

			{ name: "e < wave 4   ", req: new Request({ Charges: 4, Pts: new PtsCounter({ Attacker: 2 * sum(1, 4) - 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 4, ChargesConsumed: 4 - 0, PtsWaves: new PtsCounter({ Attacker: 4 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 4) }) }) },
			{ name: "e = wave 4   ", req: new Request({ Charges: 4, Pts: new PtsCounter({ Attacker: 2 * sum(1, 4) + 0 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 4, ChargesConsumed: 4 - 0, PtsWaves: new PtsCounter({ Attacker: 4 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 4) }) }) },
			{ name: "e > wave 4   ", req: new Request({ Charges: 4, Pts: new PtsCounter({ Attacker: 2 * sum(1, 4) + 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 5, ChargesConsumed: 4 - 0, PtsWaves: new PtsCounter({ Attacker: 5 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 4) + sum(5, 5) }) }) },
			{ name: "+e < wave 4  ", req: new Request({ Charges: 5, Pts: new PtsCounter({ Attacker: 2 * sum(1, 4) - 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 4, ChargesConsumed: 5 - 1, PtsWaves: new PtsCounter({ Attacker: 4 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 4) }) }) },
			{ name: "+e = wave 4  ", req: new Request({ Charges: 5, Pts: new PtsCounter({ Attacker: 2 * sum(1, 4) + 0 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 4, ChargesConsumed: 5 - 1, PtsWaves: new PtsCounter({ Attacker: 4 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 4) }) }) },
			{ name: "+e > wave 4  ", req: new Request({ Charges: 5, Pts: new PtsCounter({ Attacker: 2 * sum(1, 4) + 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 5, ChargesConsumed: 5 - 0, PtsWaves: new PtsCounter({ Attacker: 5 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 4) + 2 * sum(5, 5) }) }) },
			{ name: "+e = wave 4+5", req: new Request({ Charges: 5, Pts: new PtsCounter({ Attacker: 2 * sum(1, 4) + sum(5, 5) }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 5, ChargesConsumed: 5 - 0, PtsWaves: new PtsCounter({ Attacker: 5 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 4) + 2 * sum(5, 5) }) }) },

			{ name: "e < wave 5   ", req: new Request({ Charges: 5, Pts: new PtsCounter({ Attacker: 2 * sum(1, 5) - 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 5, ChargesConsumed: 5 - 0, PtsWaves: new PtsCounter({ Attacker: 5 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 5) }) }) },
			{ name: "e = wave 5   ", req: new Request({ Charges: 5, Pts: new PtsCounter({ Attacker: 2 * sum(1, 5) + 0 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 5, ChargesConsumed: 5 - 0, PtsWaves: new PtsCounter({ Attacker: 5 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 5) }) }) },
			{ name: "e > wave 5   ", req: new Request({ Charges: 5, Pts: new PtsCounter({ Attacker: 2 * sum(1, 5) + 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 6, ChargesConsumed: 5 - 0, PtsWaves: new PtsCounter({ Attacker: 6 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 5) + sum(6, 6) }) }) },
			{ name: "+e < wave 5  ", req: new Request({ Charges: 6, Pts: new PtsCounter({ Attacker: 2 * sum(1, 5) - 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 5, ChargesConsumed: 6 - 1, PtsWaves: new PtsCounter({ Attacker: 5 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 5) }) }) },
			{ name: "+e = wave 5  ", req: new Request({ Charges: 6, Pts: new PtsCounter({ Attacker: 2 * sum(1, 5) + 0 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 5, ChargesConsumed: 6 - 1, PtsWaves: new PtsCounter({ Attacker: 5 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 5) }) }) },
			{ name: "+e > wave 5  ", req: new Request({ Charges: 6, Pts: new PtsCounter({ Attacker: 2 * sum(1, 5) + 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 6, ChargesConsumed: 6 - 0, PtsWaves: new PtsCounter({ Attacker: 6 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 5) + 2 * sum(6, 6) }) }) },
			{ name: "+e = wave 5+6", req: new Request({ Charges: 6, Pts: new PtsCounter({ Attacker: 2 * sum(1, 5) + sum(6, 6) }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 6, ChargesConsumed: 6 - 0, PtsWaves: new PtsCounter({ Attacker: 6 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 5) + 2 * sum(6, 6) }) }) },

			{ name: "e < wave 6   ", req: new Request({ Charges: 6, Pts: new PtsCounter({ Attacker: 2 * sum(1, 6) - 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 6, ChargesConsumed: 6 - 0, PtsWaves: new PtsCounter({ Attacker: 6 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 6) }) }) },
			{ name: "e = wave 6   ", req: new Request({ Charges: 6, Pts: new PtsCounter({ Attacker: 2 * sum(1, 6) + 0 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 6, ChargesConsumed: 6 - 0, PtsWaves: new PtsCounter({ Attacker: 6 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 6) }) }) },
			{ name: "e > wave 6   ", req: new Request({ Charges: 6, Pts: new PtsCounter({ Attacker: 2 * sum(1, 6) + 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 7, ChargesConsumed: 6 - 0, PtsWaves: new PtsCounter({ Attacker: 7 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 6) + sum(7, 7) }) }) },
			{ name: "+e < wave 6  ", req: new Request({ Charges: 7, Pts: new PtsCounter({ Attacker: 2 * sum(1, 6) - 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 6, ChargesConsumed: 7 - 1, PtsWaves: new PtsCounter({ Attacker: 6 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 6) }) }) },
			{ name: "+e = wave 6  ", req: new Request({ Charges: 7, Pts: new PtsCounter({ Attacker: 2 * sum(1, 6) + 0 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 6, ChargesConsumed: 7 - 1, PtsWaves: new PtsCounter({ Attacker: 6 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 6) }) }) },
			{ name: "+e > wave 6  ", req: new Request({ Charges: 7, Pts: new PtsCounter({ Attacker: 2 * sum(1, 6) + 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 7, ChargesConsumed: 7 - 0, PtsWaves: new PtsCounter({ Attacker: 7 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 6) + 2 * sum(7, 7) }) }) },
			{ name: "+e = wave 6+7", req: new Request({ Charges: 7, Pts: new PtsCounter({ Attacker: 2 * sum(1, 6) + sum(7, 7) }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 7, ChargesConsumed: 7 - 0, PtsWaves: new PtsCounter({ Attacker: 7 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 6) + 2 * sum(7, 7) }) }) },

			{ name: "e < wave 7   ", req: new Request({ Charges: 7, Pts: new PtsCounter({ Attacker: 2 * sum(1, 7) - 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 7, ChargesConsumed: 7 - 0, PtsWaves: new PtsCounter({ Attacker: 7 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 7) }) }) },
			{ name: "e = wave 7   ", req: new Request({ Charges: 7, Pts: new PtsCounter({ Attacker: 2 * sum(1, 7) + 0 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 7, ChargesConsumed: 7 - 0, PtsWaves: new PtsCounter({ Attacker: 7 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 7) }) }) },
			{ name: "e > wave 7   ", req: new Request({ Charges: 7, Pts: new PtsCounter({ Attacker: 2 * sum(1, 7) + 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 8, ChargesConsumed: 7 - 0, PtsWaves: new PtsCounter({ Attacker: 8 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 7) + sum(8, 8) }) }) },
			{ name: "+e < wave 7  ", req: new Request({ Charges: 8, Pts: new PtsCounter({ Attacker: 2 * sum(1, 7) - 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 7, ChargesConsumed: 8 - 1, PtsWaves: new PtsCounter({ Attacker: 7 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 7) }) }) },
			{ name: "+e = wave 7  ", req: new Request({ Charges: 8, Pts: new PtsCounter({ Attacker: 2 * sum(1, 7) + 0 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 7, ChargesConsumed: 8 - 1, PtsWaves: new PtsCounter({ Attacker: 7 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 7) }) }) },
			{ name: "+e > wave 7  ", req: new Request({ Charges: 8, Pts: new PtsCounter({ Attacker: 2 * sum(1, 7) + 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 8, ChargesConsumed: 8 - 0, PtsWaves: new PtsCounter({ Attacker: 8 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 7) + 2 * sum(8, 8) }) }) },
			{ name: "+e = wave 7+8", req: new Request({ Charges: 8, Pts: new PtsCounter({ Attacker: 2 * sum(1, 7) + sum(8, 8) }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 8, ChargesConsumed: 8 - 0, PtsWaves: new PtsCounter({ Attacker: 8 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 7) + 2 * sum(8, 8) }) }) },

			{ name: "e < wave 8   ", req: new Request({ Charges: 8, Pts: new PtsCounter({ Attacker: 2 * sum(1, 8) - 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 8, ChargesConsumed: 8 - 0, PtsWaves: new PtsCounter({ Attacker: 8 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 8) }) }) },
			{ name: "e = wave 8   ", req: new Request({ Charges: 8, Pts: new PtsCounter({ Attacker: 2 * sum(1, 8) + 0 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 8, ChargesConsumed: 8 - 0, PtsWaves: new PtsCounter({ Attacker: 8 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 8) }) }) },
			{ name: "e > wave 8   ", req: new Request({ Charges: 8, Pts: new PtsCounter({ Attacker: 2 * sum(1, 8) + 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 9, ChargesConsumed: 8 - 0, PtsWaves: new PtsCounter({ Attacker: 9 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 8) + sum(9, 9) }) }) },
			{ name: "+e < wave 8  ", req: new Request({ Charges: 9, Pts: new PtsCounter({ Attacker: 2 * sum(1, 8) - 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 8, ChargesConsumed: 9 - 1, PtsWaves: new PtsCounter({ Attacker: 8 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 8) }) }) },
			{ name: "+e = wave 8  ", req: new Request({ Charges: 9, Pts: new PtsCounter({ Attacker: 2 * sum(1, 8) + 0 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 8, ChargesConsumed: 9 - 1, PtsWaves: new PtsCounter({ Attacker: 8 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 8) }) }) },
			{ name: "+e > wave 8  ", req: new Request({ Charges: 9, Pts: new PtsCounter({ Attacker: 2 * sum(1, 8) + 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 9, ChargesConsumed: 9 - 0, PtsWaves: new PtsCounter({ Attacker: 9 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 8) + 2 * sum(9, 9) }) }) },
			{ name: "+e = wave 8+9", req: new Request({ Charges: 9, Pts: new PtsCounter({ Attacker: 2 * sum(1, 8) + sum(9, 9) }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 9, ChargesConsumed: 9 - 0, PtsWaves: new PtsCounter({ Attacker: 9 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 8) + 2 * sum(9, 9) }) }) },

			{ name: "e < wave 9   ", req: new Request({ Charges: 9, Pts: new PtsCounter({ Attacker: 2 * sum(1, 9) - 1 }) }) /*    */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 9, ChargesConsumed: 9 - 0, PtsWaves: new PtsCounter({ Attacker: 9 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 9) }) }) },
			{ name: "e = wave 9   ", req: new Request({ Charges: 9, Pts: new PtsCounter({ Attacker: 2 * sum(1, 9) + 0 }) }) /*    */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 9, ChargesConsumed: 9 - 0, PtsWaves: new PtsCounter({ Attacker: 9 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 9) }) }) },
			{ name: "e > wave 9   ", req: new Request({ Charges: 9, Pts: new PtsCounter({ Attacker: 2 * sum(1, 9) + 1 }) }) /*    */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 2, Roles: new RoleSet(Attacker), SpareWaves: 9 - 1, ChargesConsumed: 9 - 0, PtsWaves: new PtsCounter({ Attacker: 10 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 9) + sum(1, 1) }) }) },
			{ name: "+e < wave 9  ", req: new Request({ Charges: 10, Pts: new PtsCounter({ Attacker: 2 * sum(1, 9) - 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 9, ChargesConsumed: 10 - 1, PtsWaves: new PtsCounter({ Attacker: 9 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 9) }) }) },
			{ name: "+e = wave 9  ", req: new Request({ Charges: 10, Pts: new PtsCounter({ Attacker: 2 * sum(1, 9) + 0 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 9, ChargesConsumed: 10 - 1, PtsWaves: new PtsCounter({ Attacker: 9 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 9) }) }) },
			{ name: "+e > wave 9  ", req: new Request({ Charges: 10, Pts: new PtsCounter({ Attacker: 2 * sum(1, 9) + 1 }) }) /*   */, want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 2, Roles: new RoleSet(Attacker), SpareWaves: 9 - 1, ChargesConsumed: 10 - 0, PtsWaves: new PtsCounter({ Attacker: 10 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 9) + 2 * sum(1, 1) }) }) },
			{ name: "+e = wave 9+1", req: new Request({ Charges: 10, Pts: new PtsCounter({ Attacker: 2 * sum(1, 9) + sum(1, 1) }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 2, Roles: new RoleSet(Attacker), SpareWaves: 9 - 1, ChargesConsumed: 10 - 0, PtsWaves: new PtsCounter({ Attacker: 10 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(1, 9) + 2 * sum(1, 1) }) }) },

			// multiple roles / levels
			{
				name: "w1 att, w2 def",
				req: new Request({
					Pts: new PtsCounter({
						Attacker: hmPts[1][Attacker],
						Defender: hmPts[2][Defender],
					})
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker, Defender), SpareWaves: 9 - 2, PtsWaves: new PtsCounter({ Attacker: 1, Defender: 1 }), PtsGained: new PtsCounter({ Attacker: hmPts[1][Attacker], Defender: hmPts[2][Defender] }) }),
			},
			{
				name: "w1 att, w2 def, w3 heal",
				req: new Request({
					Pts: new PtsCounter({
						Attacker: hmPts[1][Attacker],
						Defender: hmPts[2][Defender],
						Healer: hmPts[3][Healer],
					})
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker, Defender, Healer), SpareWaves: 9 - 3, PtsWaves: new PtsCounter({ Attacker: 1, Defender: 1, Healer: 1 }), PtsGained: new PtsCounter({ Attacker: hmPts[1][Attacker], Defender: hmPts[2][Defender], Healer: hmPts[3][Healer] }) }),
			},
			{
				name: "w1 att, w2 def, w3 heal, w4 col",
				req: new Request({
					Pts: new PtsCounter({
						Attacker: hmPts[1][Attacker],
						Defender: hmPts[2][Defender],
						Healer: hmPts[3][Healer],
						Collector: hmPts[4][Collector],
					})
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker, Defender, Healer, Collector), SpareWaves: 9 - 4, PtsWaves: new PtsCounter({ Attacker: 1, Defender: 1, Healer: 1, Collector: 1 }), PtsGained: new PtsCounter({ Attacker: hmPts[1][Attacker], Defender: hmPts[2][Defender], Healer: hmPts[3][Healer], Collector: hmPts[4][Collector] }) }),
			},

			{
				name: "1 round each role",
				req: new Request({
					Pts: new PtsCounter({
						Attacker: sum19att,
						Defender: sum19def,
						Healer: sum19heal,
						Collector: sum19col,
					})
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 4, Roles: new RoleSet(Attacker, Defender, Healer, Collector), SpareWaves: 9 - 9, PtsWaves: new PtsCounter({ Attacker: 9, Defender: 9, Healer: 9, Collector: 9 }), PtsGained: new PtsCounter({ Attacker: sum19att, Defender: sum19def, Healer: sum19heal, Collector: sum19col }) }),
			},
			{
				name: "2 rounds each role",
				req: new Request({
					Pts: new PtsCounter({
						Attacker: sum19att * 2,
						Defender: sum19def * 2,
						Healer: sum19heal * 2,
						Collector: sum19col * 2,
					})
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 8, Roles: new RoleSet(Attacker, Defender, Healer, Collector), SpareWaves: 9 - 9, PtsWaves: new PtsCounter({ Attacker: 18, Defender: 18, Healer: 18, Collector: 18 }), PtsGained: new PtsCounter({ Attacker: 2 * sum19att, Defender: 2 * sum19def, Healer: 2 * sum19heal, Collector: 2 * sum19col }) }),
			},
			{
				name: "lvl 5 att",
				req: new Request({
					Pts: new PtsCounter({
						Attacker: 1400,
					})
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 4, Roles: new RoleSet(Attacker), SpareWaves: 9 - 9, PtsWaves: new PtsCounter({ Attacker: 36 }), PtsGained: new PtsCounter({ Attacker: 1424 }) }),
			},
			{
				name: "lvl 5 att - enh",
				req: new Request({
					Charges: 18,
					Pts: new PtsCounter({
						Attacker: 1400,
					}),
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 2, Roles: new RoleSet(Attacker), ChargesConsumed: 18, SpareWaves: 9 - 9, PtsWaves: new PtsCounter({ Attacker: 18 }), PtsGained: new PtsCounter({ Attacker: 1424 }) }),
			},
			{
				name: "lvl 5 att - <enh",
				req: new Request({
					Charges: 17,
					Pts: new PtsCounter({
						Attacker: 1400,
					}),
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 3, Roles: new RoleSet(Attacker), ChargesConsumed: 17, SpareWaves: 9 - 3, PtsWaves: new PtsCounter({ Attacker: 21 }), PtsGained: new PtsCounter({ Attacker: 1403 }) }),
			},
			{
				name: "lvl 5 att - >enh",
				req: new Request({
					Charges: 19,
					Pts: new PtsCounter({
						Attacker: 1400,
					}),
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 2, Roles: new RoleSet(Attacker), ChargesConsumed: 18, SpareWaves: 9 - 9, PtsWaves: new PtsCounter({ Attacker: 18 }), PtsGained: new PtsCounter({ Attacker: 1424 }) }),
			},

			{
				name: "lvl 5 def",
				req: new Request({
					Pts: new PtsCounter({
						Defender: 1400,
					})
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 4, Roles: new RoleSet(Defender), SpareWaves: 9 - 6, PtsWaves: new PtsCounter({ Defender: 33 }), PtsGained: new PtsCounter({ Defender: 1447 }) }),
			},
			{
				name: "lvl 5 def - enh",
				req: new Request({
					Charges: 16,
					Pts: new PtsCounter({
						Defender: 1400,
					}),
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 2, Roles: new RoleSet(Defender), ChargesConsumed: 16, SpareWaves: 9 - 8, PtsWaves: new PtsCounter({ Defender: 17 }), PtsGained: new PtsCounter({ Defender: 1427 }) }),
			},
			{
				name: "lvl 5 def - <enh",
				req: new Request({
					Charges: 15,
					Pts: new PtsCounter({
						Defender: 1400,
					}),
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 2, Roles: new RoleSet(Defender), ChargesConsumed: 15, SpareWaves: 9 - 9, PtsWaves: new PtsCounter({ Defender: 18 }), PtsGained: new PtsCounter({ Defender: 1447 }) }),
			},
			{
				name: "lvl 5 def - >enh",
				req: new Request({
					Charges: 17,
					Pts: new PtsCounter({
						Defender: 1400,
					}),
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 2, Roles: new RoleSet(Defender), ChargesConsumed: 17, SpareWaves: 9 - 8, PtsWaves: new PtsCounter({ Defender: 17 }), PtsGained: new PtsCounter({ Defender: 1502 }) }),
			},

			{
				name: "lvl 5 heal",
				req: new Request({
					Pts: new PtsCounter({
						Healer: 1400,
					})
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 4, Roles: new RoleSet(Healer), SpareWaves: 9 - 6, PtsWaves: new PtsCounter({ Healer: 33 }), PtsGained: new PtsCounter({ Healer: 1424 }) }),
			},
			{
				name: "lvl 5 heal - enh",
				req: new Request({
					Charges: 17,
					Pts: new PtsCounter({
						Healer: 1400,
					}),
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 2, Roles: new RoleSet(Healer), ChargesConsumed: 17, SpareWaves: 9 - 8, PtsWaves: new PtsCounter({ Healer: 17 }), PtsGained: new PtsCounter({ Healer: 1480 }) }),
			},
			{
				name: "lvl 5 heal - <enh",
				req: new Request({
					Charges: 16,
					Pts: new PtsCounter({
						Healer: 1400,
					}),
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 2, Roles: new RoleSet(Healer), ChargesConsumed: 16, SpareWaves: 9 - 9, PtsWaves: new PtsCounter({ Healer: 18 }), PtsGained: new PtsCounter({ Healer: 1484 }) }),
			},
			{
				name: "lvl 5 heal - >enh",
				req: new Request({
					Charges: 18,
					Pts: new PtsCounter({
						Healer: 1400,
					}),
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 2, Roles: new RoleSet(Healer), ChargesConsumed: 17, SpareWaves: 9 - 8, PtsWaves: new PtsCounter({ Healer: 17 }), PtsGained: new PtsCounter({ Healer: 1480 }) }),
			},

			{
				name: "lvl 5 col",
				req: new Request({
					Pts: new PtsCounter({
						Collector: 1400,
					})
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 5, Roles: new RoleSet(Collector), SpareWaves: 9 - 8, PtsWaves: new PtsCounter({ Collector: 44 }), PtsGained: new PtsCounter({ Collector: 1421 }) }),
			},
			{
				name: "lvl 5 col - enh",
				req: new Request({
					Charges: 23,
					Pts: new PtsCounter({
						Collector: 1400,
					}),
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 3, Roles: new RoleSet(Collector), ChargesConsumed: 23, SpareWaves: 9 - 6, PtsWaves: new PtsCounter({ Collector: 24 }), PtsGained: new PtsCounter({ Collector: 1420 }) }),
			},
			{
				name: "lvl 5 col - <enh",
				req: new Request({
					Charges: 22,
					Pts: new PtsCounter({
						Collector: 1400,
					}),
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 3, Roles: new RoleSet(Collector), ChargesConsumed: 22, SpareWaves: 9 - 7, PtsWaves: new PtsCounter({ Collector: 25 }), PtsGained: new PtsCounter({ Collector: 1430 }) }),
			},
			{
				name: "lvl 5 col - >enh",
				req: new Request({
					Charges: 25,
					Pts: new PtsCounter({
						Collector: 1400,
					}),
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 3, Roles: new RoleSet(Collector), ChargesConsumed: 24, SpareWaves: 9 - 6, PtsWaves: new PtsCounter({ Collector: 24 }), PtsGained: new PtsCounter({ Collector: 1460 }) }),
			},

			{
				name: "2 waves def, lvl 5 col",
				req: new Request({
					Pts: new PtsCounter({
						Defender: hmPts[1][Defender] + hmPts[2][Defender],
						Collector: 1400,
					})
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 5, Roles: new RoleSet(Defender, Collector), SpareWaves: 9 - 9, PtsWaves: new PtsCounter({ Collector: 43, Defender: 2 }), PtsGained: new PtsCounter({ Collector: 1457, Defender: hmPts[1][Defender] + hmPts[2][Defender] }) }),
			},
			{
				name: "lvl 5 all",
				req: new Request({
					Pts: new PtsCounter({
						Attacker: 1400,
						Defender: 1400,
						Healer: 1400,
						Collector: 1400,
					})
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 16, Roles: new RoleSet(Attacker, Defender, Healer, Collector), SpareWaves: 9 - 8, PtsWaves: new PtsCounter({ Attacker: 36, Defender: 33, Healer: 30, Collector: 44 }), PtsGained: new PtsCounter({ Attacker: 1424, Defender: 1447, Healer: 1467, Collector: 1421 }) }),
			},
			{
				name: "lvl 5 all - enh",
				req: new Request({
					Charges: 72,
					Pts: new PtsCounter({
						Attacker: 1400,
						Defender: 1400,
						Healer: 1400,
						Collector: 1400,
					}),
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 8, Roles: new RoleSet(Attacker, Defender, Healer, Collector), ChargesConsumed: 72, SpareWaves: 9 - 9, PtsWaves: new PtsCounter({ Attacker: 18, Defender: 17, Healer: 17, Collector: 20 }), PtsGained: new PtsCounter({ Attacker: 1424, Defender: 1502, Healer: 1488, Collector: 1414 }) }),
			},
		];

		tests.forEach(tt => {
			test(tt.name, execute(tt, Hm1_9))
		})
	})

	describe("6-9 pts", () => {
		let tests: test[] = [
			{ name: "noop", req: new Request(), want: new OrderItem() },

			{ name: "< wave 6", req: new Request({ Pts: new PtsCounter({ Attacker: sum(6, 6) - 1 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 6, PtsWaves: new PtsCounter({ Attacker: 1 }), PtsGained: new PtsCounter({ Attacker: sum(6, 6) }) }) },
			{ name: "= wave 6", req: new Request({ Pts: new PtsCounter({ Attacker: sum(6, 6) + 0 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 6, PtsWaves: new PtsCounter({ Attacker: 1 }), PtsGained: new PtsCounter({ Attacker: sum(6, 6) }) }) },
			{ name: "> wave 6", req: new Request({ Pts: new PtsCounter({ Attacker: sum(6, 6) + 1 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 7, PtsWaves: new PtsCounter({ Attacker: 2 }), PtsGained: new PtsCounter({ Attacker: sum(6, 7) }) }) },

			{ name: "< wave 7", req: new Request({ Pts: new PtsCounter({ Attacker: sum(6, 7) - 1 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 7, PtsWaves: new PtsCounter({ Attacker: 2 }), PtsGained: new PtsCounter({ Attacker: sum(6, 7) }) }) },
			{ name: "= wave 7", req: new Request({ Pts: new PtsCounter({ Attacker: sum(6, 7) + 0 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 7, PtsWaves: new PtsCounter({ Attacker: 2 }), PtsGained: new PtsCounter({ Attacker: sum(6, 7) }) }) },
			{ name: "> wave 7", req: new Request({ Pts: new PtsCounter({ Attacker: sum(6, 7) + 1 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 8, PtsWaves: new PtsCounter({ Attacker: 3 }), PtsGained: new PtsCounter({ Attacker: sum(6, 8) }) }) },

			{ name: "< wave 8", req: new Request({ Pts: new PtsCounter({ Attacker: sum(6, 8) - 1 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 8, PtsWaves: new PtsCounter({ Attacker: 3 }), PtsGained: new PtsCounter({ Attacker: sum(6, 8) }) }) },
			{ name: "= wave 8", req: new Request({ Pts: new PtsCounter({ Attacker: sum(6, 8) + 0 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 8, PtsWaves: new PtsCounter({ Attacker: 3 }), PtsGained: new PtsCounter({ Attacker: sum(6, 8) }) }) },
			{ name: "> wave 8", req: new Request({ Pts: new PtsCounter({ Attacker: sum(6, 8) + 1 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 9, PtsWaves: new PtsCounter({ Attacker: 4 }), PtsGained: new PtsCounter({ Attacker: sum(6, 9) }) }) },

			{ name: "< wave 9", req: new Request({ Pts: new PtsCounter({ Attacker: sum(6, 9) - 1 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 9, PtsWaves: new PtsCounter({ Attacker: 4 }), PtsGained: new PtsCounter({ Attacker: sum(6, 9) }) }) },
			{ name: "= wave 9", req: new Request({ Pts: new PtsCounter({ Attacker: sum(6, 9) + 0 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 9, PtsWaves: new PtsCounter({ Attacker: 4 }), PtsGained: new PtsCounter({ Attacker: sum(6, 9) }) }) },
			{ name: "> wave 9", req: new Request({ Pts: new PtsCounter({ Attacker: sum(6, 9) + 1 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 2, Roles: new RoleSet(Attacker), SpareWaves: 9 - 6, PtsWaves: new PtsCounter({ Attacker: 5 }), PtsGained: new PtsCounter({ Attacker: sum(6, 9) + sum(6, 6) }) }) },

			{ name: "> wave 9 Defender", req: new Request({ Pts: new PtsCounter({ Defender: sum(6, 9, Defender) + 1 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 2, Roles: new RoleSet(Defender), SpareWaves: 9 - 6, PtsWaves: new PtsCounter({ Defender: 5 }), PtsGained: new PtsCounter({ Defender: sum(6, 9, Defender) + sum(6, 6, Defender) }) }) },
			{ name: "> wave 9 Healer", req: new Request({ Pts: new PtsCounter({ Healer: sum(6, 9, Healer) + 1 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 2, Roles: new RoleSet(Healer), SpareWaves: 9 - 6, PtsWaves: new PtsCounter({ Healer: 5 }), PtsGained: new PtsCounter({ Healer: sum(6, 9, Healer) + sum(6, 6, Healer) }) }) },
			{ name: "> wave 9 Collector", req: new Request({ Pts: new PtsCounter({ Collector: sum(6, 9, Collector) + 1 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 2, Roles: new RoleSet(Collector), SpareWaves: 9 - 6, PtsWaves: new PtsCounter({ Collector: 5 }), PtsGained: new PtsCounter({ Collector: sum(6, 9, Collector) + sum(6, 6, Collector) }) }) },

			{ name: "exact overflow", req: new Request({ Pts: new PtsCounter({ Attacker: sum(6, 9, Attacker) + sum(6, 6, Attacker) }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Roles: new RoleSet(Attacker), Count: 2, SpareWaves: 9 - 6, PtsWaves: new PtsCounter({ Attacker: 5 }), PtsGained: new PtsCounter({ Attacker: sum(6, 9) + sum(6, 6) }) }) },

			// enhancers
			{ name: "e < wave 6   ", req: new Request({ Charges: 1, Pts: new PtsCounter({ Attacker: 2 * sum(6, 6) - 1 }) /*   */ }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 6, ChargesConsumed: 1 - 0, PtsWaves: new PtsCounter({ Attacker: 1 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 6) }) }) },
			{ name: "e = wave 6   ", req: new Request({ Charges: 1, Pts: new PtsCounter({ Attacker: 2 * sum(6, 6) + 0 }) /*   */ }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 6, ChargesConsumed: 1 - 0, PtsWaves: new PtsCounter({ Attacker: 1 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 6) }) }) },
			{ name: "e > wave 6   ", req: new Request({ Charges: 1, Pts: new PtsCounter({ Attacker: 2 * sum(6, 6) + 1 }) /*   */ }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 7, ChargesConsumed: 1 - 0, PtsWaves: new PtsCounter({ Attacker: 2 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 6) + sum(7, 7) }) }) },
			{ name: "+e < wave 6  ", req: new Request({ Charges: 2, Pts: new PtsCounter({ Attacker: 2 * sum(6, 6) - 1 }) /*   */ }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 6, ChargesConsumed: 2 - 1, PtsWaves: new PtsCounter({ Attacker: 1 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 6) }) }) },
			{ name: "+e = wave 6  ", req: new Request({ Charges: 2, Pts: new PtsCounter({ Attacker: 2 * sum(6, 6) + 0 }) /*   */ }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 6, ChargesConsumed: 2 - 1, PtsWaves: new PtsCounter({ Attacker: 1 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 6) }) }) },
			{ name: "+e > wave 6  ", req: new Request({ Charges: 2, Pts: new PtsCounter({ Attacker: 2 * sum(6, 6) + 1 }) /*   */ }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 7, ChargesConsumed: 2 - 0, PtsWaves: new PtsCounter({ Attacker: 2 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 6) + 2 * sum(7, 7) }) }) },
			{ name: "+e = wave 6+7", req: new Request({ Charges: 2, Pts: new PtsCounter({ Attacker: 2 * sum(6, 6) + sum(7, 7) }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 7, ChargesConsumed: 2 - 0, PtsWaves: new PtsCounter({ Attacker: 2 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 6) + 2 * sum(7, 7) }) }) },

			{ name: "e < wave 7   ", req: new Request({ Charges: 2, Pts: new PtsCounter({ Attacker: 2 * sum(6, 7) - 1 }) /*   */ }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 7, ChargesConsumed: 2 - 0, PtsWaves: new PtsCounter({ Attacker: 2 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 7) }) }) },
			{ name: "e = wave 7   ", req: new Request({ Charges: 2, Pts: new PtsCounter({ Attacker: 2 * sum(6, 7) + 0 }) /*   */ }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 7, ChargesConsumed: 2 - 0, PtsWaves: new PtsCounter({ Attacker: 2 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 7) }) }) },
			{ name: "e > wave 7   ", req: new Request({ Charges: 2, Pts: new PtsCounter({ Attacker: 2 * sum(6, 7) + 1 }) /*   */ }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 8, ChargesConsumed: 2 - 0, PtsWaves: new PtsCounter({ Attacker: 3 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 7) + sum(8, 8) }) }) },
			{ name: "+e < wave 7  ", req: new Request({ Charges: 3, Pts: new PtsCounter({ Attacker: 2 * sum(6, 7) - 1 }) /*   */ }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 7, ChargesConsumed: 3 - 1, PtsWaves: new PtsCounter({ Attacker: 2 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 7) }) }) },
			{ name: "+e = wave 7  ", req: new Request({ Charges: 3, Pts: new PtsCounter({ Attacker: 2 * sum(6, 7) + 0 }) /*   */ }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 7, ChargesConsumed: 3 - 1, PtsWaves: new PtsCounter({ Attacker: 2 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 7) }) }) },
			{ name: "+e > wave 7  ", req: new Request({ Charges: 3, Pts: new PtsCounter({ Attacker: 2 * sum(6, 7) + 1 }) /*   */ }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 8, ChargesConsumed: 3 - 0, PtsWaves: new PtsCounter({ Attacker: 3 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 7) + 2 * sum(8, 8) }) }) },
			{ name: "+e = wave 7+8", req: new Request({ Charges: 3, Pts: new PtsCounter({ Attacker: 2 * sum(6, 7) + sum(8, 8) }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 8, ChargesConsumed: 3 - 0, PtsWaves: new PtsCounter({ Attacker: 3 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 7) + 2 * sum(8, 8) }) }) },

			{ name: "e < wave 8   ", req: new Request({ Charges: 3, Pts: new PtsCounter({ Attacker: 2 * sum(6, 8) - 1 }) /*   */ }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 8, ChargesConsumed: 3 - 0, PtsWaves: new PtsCounter({ Attacker: 3 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 8) }) }) },
			{ name: "e = wave 8   ", req: new Request({ Charges: 3, Pts: new PtsCounter({ Attacker: 2 * sum(6, 8) + 0 }) /*   */ }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 8, ChargesConsumed: 3 - 0, PtsWaves: new PtsCounter({ Attacker: 3 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 8) }) }) },
			{ name: "e > wave 8   ", req: new Request({ Charges: 3, Pts: new PtsCounter({ Attacker: 2 * sum(6, 8) + 1 }) /*   */ }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 9, ChargesConsumed: 3 - 0, PtsWaves: new PtsCounter({ Attacker: 4 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 8) + sum(9, 9) }) }) },
			{ name: "+e < wave 8  ", req: new Request({ Charges: 4, Pts: new PtsCounter({ Attacker: 2 * sum(6, 8) - 1 }) /*   */ }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 8, ChargesConsumed: 4 - 1, PtsWaves: new PtsCounter({ Attacker: 3 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 8) }) }) },
			{ name: "+e = wave 8  ", req: new Request({ Charges: 4, Pts: new PtsCounter({ Attacker: 2 * sum(6, 8) + 0 }) /*   */ }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 8, ChargesConsumed: 4 - 1, PtsWaves: new PtsCounter({ Attacker: 3 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 8) }) }) },
			{ name: "+e > wave 8  ", req: new Request({ Charges: 4, Pts: new PtsCounter({ Attacker: 2 * sum(6, 8) + 1 }) /*   */ }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 9, ChargesConsumed: 4 - 0, PtsWaves: new PtsCounter({ Attacker: 4 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 8) + 2 * sum(9, 9) }) }) },
			{ name: "+e = wave 8+9", req: new Request({ Charges: 4, Pts: new PtsCounter({ Attacker: 2 * sum(6, 8) + sum(9, 9) }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 9, ChargesConsumed: 4 - 0, PtsWaves: new PtsCounter({ Attacker: 4 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 8) + 2 * sum(9, 9) }) }) },

			{ name: "e < wave 9   ", req: new Request({ Charges: 4, Pts: new PtsCounter({ Attacker: 2 * sum(6, 9) - 1 }) /*   */ }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 9, ChargesConsumed: 4 - 0, PtsWaves: new PtsCounter({ Attacker: 4 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 9) }) }) },
			{ name: "e = wave 9   ", req: new Request({ Charges: 4, Pts: new PtsCounter({ Attacker: 2 * sum(6, 9) + 0 }) /*   */ }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 9, ChargesConsumed: 4 - 0, PtsWaves: new PtsCounter({ Attacker: 4 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 9) }) }) },
			{ name: "e > wave 9   ", req: new Request({ Charges: 4, Pts: new PtsCounter({ Attacker: 2 * sum(6, 9) + 1 }) /*   */ }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 2, Roles: new RoleSet(Attacker), SpareWaves: 9 - 6, ChargesConsumed: 4 - 0, PtsWaves: new PtsCounter({ Attacker: 5 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 9) + sum(6, 6) }) }) },
			{ name: "+e < wave 9  ", req: new Request({ Charges: 5, Pts: new PtsCounter({ Attacker: 2 * sum(6, 9) - 1 }) /*   */ }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 9, ChargesConsumed: 5 - 1, PtsWaves: new PtsCounter({ Attacker: 4 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 9) }) }) },
			{ name: "+e = wave 9  ", req: new Request({ Charges: 5, Pts: new PtsCounter({ Attacker: 2 * sum(6, 9) + 0 }) /*   */ }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker), SpareWaves: 9 - 9, ChargesConsumed: 5 - 1, PtsWaves: new PtsCounter({ Attacker: 4 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 9) }) }) },
			{ name: "+e > wave 9  ", req: new Request({ Charges: 5, Pts: new PtsCounter({ Attacker: 2 * sum(6, 9) + 1 }) /*   */ }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 2, Roles: new RoleSet(Attacker), SpareWaves: 9 - 6, ChargesConsumed: 5 - 0, PtsWaves: new PtsCounter({ Attacker: 5 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 9) + 2 * sum(6, 6) }) }) },
			{ name: "+e = wave 9+1", req: new Request({ Charges: 5, Pts: new PtsCounter({ Attacker: 2 * sum(6, 9) + sum(6, 6) }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 2, Roles: new RoleSet(Attacker), SpareWaves: 9 - 6, ChargesConsumed: 5 - 0, PtsWaves: new PtsCounter({ Attacker: 5 }), PtsGained: new PtsCounter({ Attacker: 2 * sum(6, 9) + 2 * sum(6, 6) }) }) },

			// multiple roles / levels
			{
				name: "w6 att, w7 def",
				req: new Request({
					Pts: new PtsCounter({
						Attacker: hmPts[6][Attacker],
						Defender: hmPts[7][Defender],
					})
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker, Defender), SpareWaves: 9 - 7, PtsWaves: new PtsCounter({ Attacker: 1, Defender: 1 }), PtsGained: new PtsCounter({ Attacker: hmPts[6][Attacker], Defender: hmPts[7][Defender] }) }),
			},
			{
				name: "w6 att, w7 def, w8 heal",
				req: new Request({
					Pts: new PtsCounter({
						Attacker: hmPts[6][Attacker],
						Defender: hmPts[7][Defender],
						Healer: hmPts[8][Healer],
					})
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker, Defender, Healer), SpareWaves: 9 - 8, PtsWaves: new PtsCounter({ Attacker: 1, Defender: 1, Healer: 1 }), PtsGained: new PtsCounter({ Attacker: hmPts[6][Attacker], Defender: hmPts[7][Defender], Healer: hmPts[8][Healer] }) }),
			},
			{
				name: "w6 att, w7 def, w8 heal, w9 col",
				req: new Request({
					Pts: new PtsCounter({
						Attacker: hmPts[6][Attacker],
						Defender: hmPts[7][Defender],
						Healer: hmPts[8][Healer],
						Collector: hmPts[9][Collector],
					})
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 1, Roles: new RoleSet(Attacker, Defender, Healer, Collector), SpareWaves: 9 - 9, PtsWaves: new PtsCounter({ Attacker: 1, Defender: 1, Healer: 1, Collector: 1 }), PtsGained: new PtsCounter({ Attacker: hmPts[6][Attacker], Defender: hmPts[7][Defender], Healer: hmPts[8][Healer], Collector: hmPts[9][Collector] }) }),
			},

			{
				name: "1 round each role",
				req: new Request({
					Pts: new PtsCounter({
						Attacker: sum69att,
						Defender: sum69def,
						Healer: sum69heal,
						Collector: sum69col,
					})
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 4, Roles: new RoleSet(Attacker, Defender, Healer, Collector), SpareWaves: 9 - 9, PtsWaves: new PtsCounter({ Attacker: 4, Defender: 4, Healer: 4, Collector: 4 }), PtsGained: new PtsCounter({ Attacker: sum69att, Defender: sum69def, Healer: sum69heal, Collector: sum69col }) }),
			},
			{
				name: "2 rounds each role",
				req: new Request({
					Pts: new PtsCounter({
						Attacker: sum69att * 2,
						Defender: sum69def * 2,
						Healer: sum69heal * 2,
						Collector: sum69col * 2,
					})
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 8, Roles: new RoleSet(Attacker, Defender, Healer, Collector), SpareWaves: 9 - 9, PtsWaves: new PtsCounter({ Attacker: 8, Defender: 8, Healer: 8, Collector: 8 }), PtsGained: new PtsCounter({ Attacker: 2 * sum69att, Defender: 2 * sum69def, Healer: 2 * sum69heal, Collector: 2 * sum69col }) }),
			},

			{
				name: "lvl 5 att",
				req: new Request({
					Pts: new PtsCounter({
						Attacker: 1400,
					})
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 6, Roles: new RoleSet(Attacker), SpareWaves: 9 - 9, PtsWaves: new PtsCounter({ Attacker: 24 }), PtsGained: new PtsCounter({ Attacker: 1434 }) }),
			},
			{
				name: "lvl 5 att - enh",
				req: new Request({
					Charges: 12,
					Pts: new PtsCounter({
						Attacker: 1400,
					}),
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 3, Roles: new RoleSet(Attacker), ChargesConsumed: 12, SpareWaves: 9 - 9, PtsWaves: new PtsCounter({ Attacker: 12 }), PtsGained: new PtsCounter({ Attacker: 1434 }) }),
			},
			{
				name: "lvl 5 att - <enh",
				req: new Request({
					Charges: 11,
					Pts: new PtsCounter({
						Attacker: 1400,
					}),
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 4, Roles: new RoleSet(Attacker), ChargesConsumed: 11, SpareWaves: 9 - 6, PtsWaves: new PtsCounter({ Attacker: 13 }), PtsGained: new PtsCounter({ Attacker: 1411 }) }),
			},
			{
				name: "lvl 5 att - >enh",
				req: new Request({
					Charges: 13,
					Pts: new PtsCounter({
						Attacker: 1400,
					}),
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 3, Roles: new RoleSet(Attacker), ChargesConsumed: 12, SpareWaves: 9 - 9, PtsWaves: new PtsCounter({ Attacker: 12 }), PtsGained: new PtsCounter({ Attacker: 1434 }) }),
			},

			{
				name: "lvl 5 def",
				req: new Request({
					Pts: new PtsCounter({
						Defender: 1400,
					})
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 6, Roles: new RoleSet(Defender), SpareWaves: 9 - 6, PtsWaves: new PtsCounter({ Defender: 21 }), PtsGained: new PtsCounter({ Defender: 1401 }) }),
			},
			{
				name: "lvl 5 def - enh",
				req: new Request({
					Charges: 11,
					Pts: new PtsCounter({
						Defender: 1400,
					}),
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 3, Roles: new RoleSet(Defender), ChargesConsumed: 11, SpareWaves: 9 - 8, PtsWaves: new PtsCounter({ Defender: 11 }), PtsGained: new PtsCounter({ Defender: 1456 }) }),
			},
			{
				name: "lvl 5 def - <enh",
				req: new Request({
					Charges: 10,
					Pts: new PtsCounter({
						Defender: 1400,
					}),
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 3, Roles: new RoleSet(Defender), ChargesConsumed: 10, SpareWaves: 9 - 9, PtsWaves: new PtsCounter({ Defender: 12 }), PtsGained: new PtsCounter({ Defender: 1460 }) }),
			},
			{
				name: "lvl 5 def - >enh",
				req: new Request({
					Charges: 12,
					Pts: new PtsCounter({
						Defender: 1400,
					}),
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 3, Roles: new RoleSet(Defender), ChargesConsumed: 11, SpareWaves: 9 - 8, PtsWaves: new PtsCounter({ Defender: 11 }), PtsGained: new PtsCounter({ Defender: 1456 }) }),
			},

			{
				name: "lvl 5 heal",
				req: new Request({
					Pts: new PtsCounter({
						Healer: 1400,
					})
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 5, Roles: new RoleSet(Healer), SpareWaves: 9 - 9, PtsWaves: new PtsCounter({ Healer: 20 }), PtsGained: new PtsCounter({ Healer: 1420 }) }),
			},
			{
				name: "lvl 5 heal - enh",
				req: new Request({
					Charges: 11,
					Pts: new PtsCounter({
						Healer: 1400,
					}),
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 3, Roles: new RoleSet(Healer), ChargesConsumed: 11, SpareWaves: 9 - 8, PtsWaves: new PtsCounter({ Healer: 11 }), PtsGained: new PtsCounter({ Healer: 1532 }) }),
			},
			{
				name: "lvl 5 heal - <enh",
				req: new Request({
					Charges: 9,
					Pts: new PtsCounter({
						Healer: 1400,
					}),
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 3, Roles: new RoleSet(Healer), ChargesConsumed: 9, SpareWaves: 9 - 9, PtsWaves: new PtsCounter({ Healer: 12 }), PtsGained: new PtsCounter({ Healer: 1476 }) }),
			},
			{
				name: "lvl 5 heal - >enh",
				req: new Request({
					Charges: 12,
					Pts: new PtsCounter({
						Healer: 1400,
					}),
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 3, Roles: new RoleSet(Healer), ChargesConsumed: 11, SpareWaves: 9 - 8, PtsWaves: new PtsCounter({ Healer: 11 }), PtsGained: new PtsCounter({ Healer: 1532 }) }),
			},

			{
				name: "lvl 5 col",
				req: new Request({
					Pts: new PtsCounter({
						Collector: 1400,
					})
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 8, Roles: new RoleSet(Collector), SpareWaves: 9 - 6, PtsWaves: new PtsCounter({ Collector: 29 }), PtsGained: new PtsCounter({ Collector: 1426 }) }),
			},
			{
				name: "lvl 5 col - enh",
				req: new Request({
					Charges: 15,
					Pts: new PtsCounter({
						Collector: 1400,
					}),
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 4, Roles: new RoleSet(Collector), ChargesConsumed: 15, SpareWaves: 9 - 8, PtsWaves: new PtsCounter({ Collector: 15 }), PtsGained: new PtsCounter({ Collector: 1466 }) }),
			},
			{
				name: "lvl 5 col - <enh",
				req: new Request({
					Charges: 14,
					Pts: new PtsCounter({
						Collector: 1400,
					}),
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 4, Roles: new RoleSet(Collector), ChargesConsumed: 14, SpareWaves: 9 - 8, PtsWaves: new PtsCounter({ Collector: 15 }), PtsGained: new PtsCounter({ Collector: 1410 }) }),
			},
			{
				name: "lvl 5 col - >enh",
				req: new Request({
					Charges: 16,
					Pts: new PtsCounter({
						Collector: 1400,
					}),
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 4, Roles: new RoleSet(Collector), ChargesConsumed: 15, SpareWaves: 9 - 8, PtsWaves: new PtsCounter({ Collector: 15 }), PtsGained: new PtsCounter({ Collector: 1466 }) }),
			},

			{
				name: "2 waves def, lvl 5 col",
				req: new Request({
					Pts: new PtsCounter({
						Defender: hmPts[6][Defender] + hmPts[7][Defender],
						Collector: 1400,
					})
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 8, Roles: new RoleSet(Defender, Collector), SpareWaves: 9 - 8, PtsWaves: new PtsCounter({ Defender: 2, Collector: 29 }), PtsGained: new PtsCounter({ Defender: hmPts[6][Defender] + hmPts[7][Defender], Collector: 1442 }) }),
			},
			{
				name: "lvl 5 all",
				req: new Request({
					Pts: new PtsCounter({
						Attacker: 1400,
						Defender: 1400,
						Healer: 1400,
						Collector: 1400,
					})
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 24, Roles: new RoleSet(Attacker, Defender, Healer, Collector), SpareWaves: 9 - 7, PtsWaves: new PtsCounter({ Attacker: 24, Defender: 21, Healer: 20, Collector: 29 }), PtsGained: new PtsCounter({ Attacker: 1434, Defender: 1401, Healer: 1420, Collector: 1429 }) }),
			},
			{
				name: "lvl 5 all - enh",
				req: new Request({
					Charges: 48,
					Pts: new PtsCounter({
						Attacker: 1400,
						Defender: 1400,
						Healer: 1400,
						Collector: 1400,
					}),
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindPoints, PriceDur: LeechPriceDurTable.Hm69Pts(), Count: 12, Roles: new RoleSet(Attacker, Defender, Healer, Collector), ChargesConsumed: 48, SpareWaves: 9 - 9, PtsWaves: new PtsCounter({ Attacker: 12, Defender: 11, Healer: 10, Collector: 15 }), PtsGained: new PtsCounter({ Attacker: 1434, Defender: 1456, Healer: 1420, Collector: 1504 }) }),
			},
		];
		tests.forEach(tt => {
			test(tt.name, execute(tt, Hm6_9))
		});
	})
});

describe('calcBxpRounds', () => {
	type test = {
		name: string
		req: Request
		want: OrderItem
	}

	let sum = function (from: number, to: number, ...rr: Skill[]): number {
		let r: Skill
		if (rr.length > 0) {
			r = rr[0]
		} else {
			r = Agility
		}
		let total = 0;
		for (let i = from; i <= to; i++) {
			total += hmXp[i][r]
		}
		return total
	}

	let execute = function (tt: test, mode: RoundMode): () => void {
		return () => {
			let ctr = new WaveCounter(mode)
			let got = calcBxpRounds(tt.req, ctr)
			expect(got).toEqual(tt.want)
		}
	}

	describe("1-9", () => {
		let tests: test[] = [
			{ name: "noop", req: new Request(), want: new OrderItem() },

			{ name: "< wave 1", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 1) - 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 1, BxpWaves: new BxpCounter({ Agility: 1 }), BxpGained: new BxpCounter({ Agility: sum(1, 1) }) }) },
			{ name: "= wave 1", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 1) + 0 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 1, BxpWaves: new BxpCounter({ Agility: 1 }), BxpGained: new BxpCounter({ Agility: sum(1, 1) }) }) },
			{ name: "> wave 1", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 1) + 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 2, BxpWaves: new BxpCounter({ Agility: 2 }), BxpGained: new BxpCounter({ Agility: sum(1, 2) }) }) },

			{ name: "< wave 2", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 2) - 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 2, BxpWaves: new BxpCounter({ Agility: 2 }), BxpGained: new BxpCounter({ Agility: sum(1, 2) }) }) },
			{ name: "= wave 2", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 2) + 0 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 2, BxpWaves: new BxpCounter({ Agility: 2 }), BxpGained: new BxpCounter({ Agility: sum(1, 2) }) }) },
			{ name: "> wave 2", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 2) + 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 3, BxpWaves: new BxpCounter({ Agility: 3 }), BxpGained: new BxpCounter({ Agility: sum(1, 3) }) }) },

			{ name: "< wave 3", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 3) - 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 3, BxpWaves: new BxpCounter({ Agility: 3 }), BxpGained: new BxpCounter({ Agility: sum(1, 3) }) }) },
			{ name: "= wave 3", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 3) + 0 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 3, BxpWaves: new BxpCounter({ Agility: 3 }), BxpGained: new BxpCounter({ Agility: sum(1, 3) }) }) },
			{ name: "> wave 3", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 3) + 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 4, BxpWaves: new BxpCounter({ Agility: 4 }), BxpGained: new BxpCounter({ Agility: sum(1, 4) }) }) },

			{ name: "< wave 4", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 4) - 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 4, BxpWaves: new BxpCounter({ Agility: 4 }), BxpGained: new BxpCounter({ Agility: sum(1, 4) }) }) },
			{ name: "= wave 4", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 4) + 0 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 4, BxpWaves: new BxpCounter({ Agility: 4 }), BxpGained: new BxpCounter({ Agility: sum(1, 4) }) }) },
			{ name: "> wave 4", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 4) + 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 5, BxpWaves: new BxpCounter({ Agility: 5 }), BxpGained: new BxpCounter({ Agility: sum(1, 5) }) }) },

			{ name: "< wave 5", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 5) - 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 5, BxpWaves: new BxpCounter({ Agility: 5 }), BxpGained: new BxpCounter({ Agility: sum(1, 5) }) }) },
			{ name: "= wave 5", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 5) + 0 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 5, BxpWaves: new BxpCounter({ Agility: 5 }), BxpGained: new BxpCounter({ Agility: sum(1, 5) }) }) },
			{ name: "> wave 5", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 5) + 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 6, BxpWaves: new BxpCounter({ Agility: 6 }), BxpGained: new BxpCounter({ Agility: sum(1, 6) }) }) },

			{ name: "< wave 6", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 6) - 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 6, BxpWaves: new BxpCounter({ Agility: 6 }), BxpGained: new BxpCounter({ Agility: sum(1, 6) }) }) },
			{ name: "= wave 6", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 6) + 0 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 6, BxpWaves: new BxpCounter({ Agility: 6 }), BxpGained: new BxpCounter({ Agility: sum(1, 6) }) }) },
			{ name: "> wave 6", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 6) + 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 7, BxpWaves: new BxpCounter({ Agility: 7 }), BxpGained: new BxpCounter({ Agility: sum(1, 7) }) }) },

			{ name: "< wave 7", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 7) - 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 7, BxpWaves: new BxpCounter({ Agility: 7 }), BxpGained: new BxpCounter({ Agility: sum(1, 7) }) }) },
			{ name: "= wave 7", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 7) + 0 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 7, BxpWaves: new BxpCounter({ Agility: 7 }), BxpGained: new BxpCounter({ Agility: sum(1, 7) }) }) },
			{ name: "> wave 7", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 7) + 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 8, BxpWaves: new BxpCounter({ Agility: 8 }), BxpGained: new BxpCounter({ Agility: sum(1, 8) }) }) },

			{ name: "< wave 8", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 8) - 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 8, BxpWaves: new BxpCounter({ Agility: 8 }), BxpGained: new BxpCounter({ Agility: sum(1, 8) }) }) },
			{ name: "= wave 8", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 8) + 0 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 8, BxpWaves: new BxpCounter({ Agility: 8 }), BxpGained: new BxpCounter({ Agility: sum(1, 8) }) }) },
			{ name: "> wave 8", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 8) + 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 9, BxpWaves: new BxpCounter({ Agility: 9 }), BxpGained: new BxpCounter({ Agility: sum(1, 9) }) }) },

			{ name: "< wave 9", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 9) - 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 9, BxpWaves: new BxpCounter({ Agility: 9 }), BxpGained: new BxpCounter({ Agility: sum(1, 9) }) }) },
			{ name: "= wave 9", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 9) + 0 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 9, BxpWaves: new BxpCounter({ Agility: 9 }), BxpGained: new BxpCounter({ Agility: sum(1, 9) }) }) },
			{ name: "> wave 9", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 9) + 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 2, Roles: new RoleSet(Collector), SpareWaves: 9 - 1, BxpWaves: new BxpCounter({ Agility: 10 }), BxpGained: new BxpCounter({ Agility: sum(1, 9) + sum(1, 1) }) }) },

			{ name: "> wave 9 Firemaking", req: new Request({ Bxp: new BxpCounter({ Firemaking: sum(1, 9, Firemaking) + 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 2, Roles: new RoleSet(Collector), SpareWaves: 9 - 1, BxpWaves: new BxpCounter({ Firemaking: 10 }), BxpGained: new BxpCounter({ Firemaking: sum(1, 9, Firemaking) + sum(1, 1, Firemaking) }) }) },
			{ name: "> wave 9 Mining", req: new Request({ Bxp: new BxpCounter({ Mining: sum(1, 9, Mining) + 1 }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 2, Roles: new RoleSet(Collector), SpareWaves: 9 - 1, BxpWaves: new BxpCounter({ Mining: 10 }), BxpGained: new BxpCounter({ Mining: sum(1, 9, Mining) + sum(1, 1, Mining) }) }) },

			{ name: "exact overflow", req: new Request({ Bxp: new BxpCounter({ Agility: sum(1, 9) + sum(1, 1) }) }), want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 2, Roles: new RoleSet(Collector), SpareWaves: 9 - 1, BxpWaves: new BxpCounter({ Agility: 10 }), BxpGained: new BxpCounter({ Agility: sum(1, 9) + sum(1, 1) }) }) },

			// multiple skills
			{
				name: "w1 agil, w2 fm",
				req: new Request({
					Bxp: new BxpCounter({
						Agility: hmXp[1][Agility],
						Firemaking: hmXp[2][Firemaking],
					})
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 2, BxpWaves: new BxpCounter({ Agility: 1, Firemaking: 1 }), BxpGained: new BxpCounter({ Agility: hmXp[1][Agility], Firemaking: hmXp[2][Firemaking] }) }),
			},
			{
				name: "w1 agil, w2 fm, w3 min",
				req: new Request({
					Bxp: new BxpCounter({
						Agility: hmXp[1][Agility],
						Firemaking: hmXp[2][Firemaking],
						Mining: hmXp[3][Mining],
					})
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 3, BxpWaves: new BxpCounter({ Agility: 1, Firemaking: 1, Mining: 1 }), BxpGained: new BxpCounter({ Agility: hmXp[1][Agility], Firemaking: hmXp[2][Firemaking], Mining: hmXp[3][Mining] }) }),
			},

			{
				name: "1 round each skill",
				req: new Request({
					Bxp: new BxpCounter({
						Agility: sum19agil,
						Firemaking: sum19fm,
						Mining: sum19min,
					})
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 3, Roles: new RoleSet(Collector), SpareWaves: 9 - 9, BxpWaves: new BxpCounter({ Agility: 9, Firemaking: 9, Mining: 9 }), BxpGained: new BxpCounter({ Agility: sum19agil, Firemaking: sum19fm, Mining: sum19min }) }),
			},
			{
				name: "2 rounds each skill",
				req: new Request({
					Bxp: new BxpCounter({
						Agility: sum19agil * 2,
						Firemaking: sum19fm * 2,
						Mining: sum19min * 2,
					})
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 6, Roles: new RoleSet(Collector), SpareWaves: 9 - 9, BxpWaves: new BxpCounter({ Agility: 18, Firemaking: 18, Mining: 18 }), BxpGained: new BxpCounter({ Agility: 2 * sum19agil, Firemaking: 2 * sum19fm, Mining: 2 * sum19min }) }),
			},
			{
				name: "2m agil",
				req: new Request({
					Bxp: new BxpCounter({
						Agility: 2000000,
					})
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 7, Roles: new RoleSet(Collector), SpareWaves: 9 - 7, BxpWaves: new BxpCounter({ Agility: 61 }), BxpGained: new BxpCounter({ Agility: 2021073 }) }),
			},
			{
				name: "2m fm",
				req: new Request({
					Bxp: new BxpCounter({
						Firemaking: 2000000,
					})
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 3, Roles: new RoleSet(Collector), SpareWaves: 9 - 7, BxpWaves: new BxpCounter({ Firemaking: 25 }), BxpGained: new BxpCounter({ Firemaking: 2075094 }) }),
			},
			{
				name: "2m min",
				req: new Request({
					Bxp: new BxpCounter({
						Mining: 2000000,
					})
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 5, Roles: new RoleSet(Collector), SpareWaves: 9 - 7, BxpWaves: new BxpCounter({ Mining: 43 }), BxpGained: new BxpCounter({ Mining: 2024841 }) }),
			},
			{
				name: "2 waves agil, 2m fm",
				req: new Request({
					Bxp: new BxpCounter({
						Agility: hmXp[1][Agility] + hmXp[2][Agility],
						Firemaking: 2000000,
					})
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 3, Roles: new RoleSet(Collector), SpareWaves: 9 - 7, BxpWaves: new BxpCounter({ Agility: 2, Firemaking: 23 }), BxpGained: new BxpCounter({ Agility: hmXp[1][Agility] + hmXp[2][Agility], Firemaking: 2021613 }) }),
			},
			{
				name: "2m all",
				req: new Request({
					Bxp: new BxpCounter({
						Agility: 2000000,
						Firemaking: 2000000,
						Mining: 2000000,
					})
				}),
				want: new OrderItem({ Mode: Hm1_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 14, Roles: new RoleSet(Collector), SpareWaves: 9 - 7, BxpWaves: new BxpCounter({ Agility: 61, Firemaking: 21, Mining: 42 }), BxpGained: new BxpCounter({ Agility: 2021073, Firemaking: 2010918, Mining: 2013137 }) }),
			},
		];

		tests.forEach(tt => {
			test(tt.name, execute(tt, Hm1_9))
		})
	})

	describe("6-9", () => {
		let tests: test[] = [
			{ name: "noop", req: new Request(), want: new OrderItem() },

			{ name: "< wave 6", req: new Request({ Bxp: new BxpCounter({ Agility: sum(6, 6) - 1 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 6, BxpWaves: new BxpCounter({ Agility: 1 }), BxpGained: new BxpCounter({ Agility: sum(6, 6) }) }) },
			{ name: "= wave 6", req: new Request({ Bxp: new BxpCounter({ Agility: sum(6, 6) + 0 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 6, BxpWaves: new BxpCounter({ Agility: 1 }), BxpGained: new BxpCounter({ Agility: sum(6, 6) }) }) },
			{ name: "> wave 6", req: new Request({ Bxp: new BxpCounter({ Agility: sum(6, 6) + 1 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 7, BxpWaves: new BxpCounter({ Agility: 2 }), BxpGained: new BxpCounter({ Agility: sum(6, 7) }) }) },

			{ name: "< wave 7", req: new Request({ Bxp: new BxpCounter({ Agility: sum(6, 7) - 1 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 7, BxpWaves: new BxpCounter({ Agility: 2 }), BxpGained: new BxpCounter({ Agility: sum(6, 7) }) }) },
			{ name: "= wave 7", req: new Request({ Bxp: new BxpCounter({ Agility: sum(6, 7) + 0 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 7, BxpWaves: new BxpCounter({ Agility: 2 }), BxpGained: new BxpCounter({ Agility: sum(6, 7) }) }) },
			{ name: "> wave 7", req: new Request({ Bxp: new BxpCounter({ Agility: sum(6, 7) + 1 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 8, BxpWaves: new BxpCounter({ Agility: 3 }), BxpGained: new BxpCounter({ Agility: sum(6, 8) }) }) },

			{ name: "< wave 8", req: new Request({ Bxp: new BxpCounter({ Agility: sum(6, 8) - 1 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 8, BxpWaves: new BxpCounter({ Agility: 3 }), BxpGained: new BxpCounter({ Agility: sum(6, 8) }) }) },
			{ name: "= wave 8", req: new Request({ Bxp: new BxpCounter({ Agility: sum(6, 8) + 0 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 8, BxpWaves: new BxpCounter({ Agility: 3 }), BxpGained: new BxpCounter({ Agility: sum(6, 8) }) }) },
			{ name: "> wave 8", req: new Request({ Bxp: new BxpCounter({ Agility: sum(6, 8) + 1 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 9, BxpWaves: new BxpCounter({ Agility: 4 }), BxpGained: new BxpCounter({ Agility: sum(6, 9) }) }) },

			{ name: "< wave 9", req: new Request({ Bxp: new BxpCounter({ Agility: sum(6, 9) - 1 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 9, BxpWaves: new BxpCounter({ Agility: 4 }), BxpGained: new BxpCounter({ Agility: sum(6, 9) }) }) },
			{ name: "= wave 9", req: new Request({ Bxp: new BxpCounter({ Agility: sum(6, 9) + 0 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 9, BxpWaves: new BxpCounter({ Agility: 4 }), BxpGained: new BxpCounter({ Agility: sum(6, 9) }) }) },
			{ name: "> wave 9", req: new Request({ Bxp: new BxpCounter({ Agility: sum(6, 9) + 1 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 2, Roles: new RoleSet(Collector), SpareWaves: 9 - 6, BxpWaves: new BxpCounter({ Agility: 5 }), BxpGained: new BxpCounter({ Agility: sum(6, 9) + sum(6, 6) }) }) },

			{ name: "> wave 9 Firemaking", req: new Request({ Bxp: new BxpCounter({ Firemaking: sum(6, 9, Firemaking) + 1 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 2, Roles: new RoleSet(Collector), SpareWaves: 9 - 6, BxpWaves: new BxpCounter({ Firemaking: 5 }), BxpGained: new BxpCounter({ Firemaking: sum(6, 9, Firemaking) + sum(6, 6, Firemaking) }) }) },
			{ name: "> wave 9 Mining", req: new Request({ Bxp: new BxpCounter({ Mining: sum(6, 9, Mining) + 1 }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 2, Roles: new RoleSet(Collector), SpareWaves: 9 - 6, BxpWaves: new BxpCounter({ Mining: 5 }), BxpGained: new BxpCounter({ Mining: sum(6, 9, Mining) + sum(6, 6, Mining) }) }) },

			{ name: "exact overflow", req: new Request({ Bxp: new BxpCounter({ Agility: sum(6, 9) + sum(6, 6) }) }), want: new OrderItem({ Mode: Hm6_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Roles: new RoleSet(Collector), Count: 2, SpareWaves: 9 - 6, BxpWaves: new BxpCounter({ Agility: 5 }), BxpGained: new BxpCounter({ Agility: sum(6, 9) + sum(6, 6) }) }) },

			// multiple skills
			{
				name: "w1 agil, w2 fm",
				req: new Request({
					Bxp: new BxpCounter({
						Agility: hmXp[6][Agility],
						Firemaking: hmXp[7][Firemaking],
					})
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 7, BxpWaves: new BxpCounter({ Agility: 1, Firemaking: 1 }), BxpGained: new BxpCounter({ Agility: hmXp[6][Agility], Firemaking: hmXp[7][Firemaking] }) }),
			},
			{
				name: "w1 agil, w2 fm, w3 min",
				req: new Request({
					Bxp: new BxpCounter({
						Agility: hmXp[6][Agility],
						Firemaking: hmXp[7][Firemaking],
						Mining: hmXp[8][Mining],
					})
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 1, Roles: new RoleSet(Collector), SpareWaves: 9 - 8, BxpWaves: new BxpCounter({ Agility: 1, Firemaking: 1, Mining: 1 }), BxpGained: new BxpCounter({ Agility: hmXp[6][Agility], Firemaking: hmXp[7][Firemaking], Mining: hmXp[8][Mining] }) }),
			},

			{
				name: "1 round each skill",
				req: new Request({
					Bxp: new BxpCounter({
						Agility: sum69agil,
						Firemaking: sum69fm,
						Mining: sum69min,
					})
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 3, Roles: new RoleSet(Collector), SpareWaves: 9 - 9, BxpWaves: new BxpCounter({ Agility: 4, Firemaking: 4, Mining: 4 }), BxpGained: new BxpCounter({ Agility: sum69agil, Firemaking: sum69fm, Mining: sum69min }) }),
			},
			{
				name: "2 rounds each skill",
				req: new Request({
					Bxp: new BxpCounter({
						Agility: sum69agil * 2,
						Firemaking: sum69fm * 2,
						Mining: sum69min * 2,
					})
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 6, Roles: new RoleSet(Collector), SpareWaves: 9 - 9, BxpWaves: new BxpCounter({ Agility: 8, Firemaking: 8, Mining: 8 }), BxpGained: new BxpCounter({ Agility: 2 * sum69agil, Firemaking: 2 * sum69fm, Mining: 2 * sum69min }) }),
			},
			{
				name: "2m agil",
				req: new Request({
					Bxp: new BxpCounter({
						Agility: 2000000,
					})
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 9, Roles: new RoleSet(Collector), SpareWaves: 9 - 9, BxpWaves: new BxpCounter({ Agility: 36 }), BxpGained: new BxpCounter({ Agility: 2008917 }) }),
			},
			{
				name: "2m fm",
				req: new Request({
					Bxp: new BxpCounter({
						Firemaking: 2000000,
					})
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 4, Roles: new RoleSet(Collector), SpareWaves: 9 - 8, BxpWaves: new BxpCounter({ Firemaking: 15 }), BxpGained: new BxpCounter({ Firemaking: 2149976 }) }),
			},
			{
				name: "2m min",
				req: new Request({
					Bxp: new BxpCounter({
						Mining: 2000000,
					})
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 7, Roles: new RoleSet(Collector), SpareWaves: 9 - 7, BxpWaves: new BxpCounter({ Mining: 26 }), BxpGained: new BxpCounter({ Mining: 2054109 }) }),
			},
			{
				name: "2 waves agil, 2m fm",
				req: new Request({
					Bxp: new BxpCounter({
						Agility: hmXp[6][Agility] + hmXp[7][Agility],
						Firemaking: 2000000,
					})
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 4, Roles: new RoleSet(Collector), SpareWaves: 9 - 9, BxpWaves: new BxpCounter({ Agility: 2, Firemaking: 14 }), BxpGained: new BxpCounter({ Agility: hmXp[6][Agility] + hmXp[7][Agility], Firemaking: 2128584 }) }),
			},
			{
				name: "2m all",
				req: new Request({
					Bxp: new BxpCounter({
						Agility: 2000000,
						Firemaking: 2000000,
						Mining: 2000000,
					})
				}),
				want: new OrderItem({ Mode: Hm6_9, Kind: KindBxp, PriceDur: LeechPriceDurTable.Hm69Bxp(), Count: 19, Roles: new RoleSet(Collector), SpareWaves: 9 - 9, BxpWaves: new BxpCounter({ Agility: 36, Firemaking: 15, Mining: 25 }), BxpGained: new BxpCounter({ Agility: 2008917, Firemaking: 2149976, Mining: 2042405 }) }),
			},
		];
		tests.forEach(tt => {
			test(tt.name, execute(tt, Hm6_9))
		})
	})
});

describe('calcRoundsIM', () => {
	let tests: {
		name: string
		req: Request
		want19: OrderItem
		want69: OrderItem
	}[] = [
			{
				name: "empty",
				req: new Request({ Ironman: true, Progress: ProgressHM1, Queen: 1 }),
				want19: new OrderItem({ Kind: KindPoints, Mode: Hm1_9, PriceDur: LeechPriceDurTable.Ironman19() }),
				want69: new OrderItem({ Kind: KindPoints, Mode: Hm6_9, PriceDur: LeechPriceDurTable.Hm69Pts() }),
			},
			{
				name: "1-9 att",
				req: new Request({
					Ironman: true,
					Progress: ProgressHM1,
					Pts: new PtsCounter({
						Attacker: sum19att,
					}),
				}),
				want19: new OrderItem({
					Kind: KindPoints,
					Mode: Hm1_9,
					PriceDur: LeechPriceDurTable.Ironman19(),
					Count: 1,
					Roles: new RoleSet(Attacker),
					ChargesConsumed: 0,
					PtsGained: new PtsCounter({ Attacker: sum19att }),
					PtsWaves: new PtsCounter({ Attacker: 9 }),
					SpareWaves: 0,
				}),
				want69: new OrderItem({
					Kind: KindPoints,
					Mode: Hm6_9,
					PriceDur: LeechPriceDurTable.Hm69Pts(),
				}),
			},
			{
				name: "6-9 att",
				req: new Request({
					Ironman: true,
					Progress: ProgressHM1,
					Pts: new PtsCounter({
						Attacker: sum69att,
					}),
					Hm10Tickets: 1,
				}),
				want19: new OrderItem({
					Kind: KindPoints,
					Mode: Hm1_9,
					PriceDur: LeechPriceDurTable.Ironman19(),
				}),
				want69: new OrderItem({
					Kind: KindPoints,
					Mode: Hm6_9,
					PriceDur: LeechPriceDurTable.Hm69Pts(),
					Count: 1,
					Roles: new RoleSet(Attacker),
					ChargesConsumed: 0,
					PtsGained: new PtsCounter({ Attacker: sum69att }),
					PtsWaves: new PtsCounter({ Attacker: 4 }),
					SpareWaves: 0,
				}),
			},
			{
				name: "1-9 att, 6-9 def",
				req: new Request({
					Ironman: true,
					Progress: ProgressHM1,
					Pts: new PtsCounter({
						Attacker: sum19att,
						Defender: sum69def,
					}),
				}),
				want19: new OrderItem({
					Kind: KindPoints,
					Mode: Hm1_9,
					PriceDur: LeechPriceDurTable.Ironman19(),
					Count: 1,
					Roles: new RoleSet(Attacker),
					ChargesConsumed: 0,
					PtsGained: new PtsCounter({ Attacker: sum19att }),
					PtsWaves: new PtsCounter({ Attacker: 9 }),
					SpareWaves: 0,
				}),
				want69: new OrderItem({
					Kind: KindPoints,
					Mode: Hm6_9,
					PriceDur: LeechPriceDurTable.Hm69Pts(),
					Count: 1,
					Roles: new RoleSet(Defender),
					ChargesConsumed: 0,
					PtsGained: new PtsCounter({ Defender: sum69def }),
					PtsWaves: new PtsCounter({ Defender: 4 }),
					SpareWaves: 0,
				}),
			},
			{
				name: "1-9 heal, 6-9 col",
				req: new Request({
					Ironman: true,
					Progress: ProgressHM1,
					Pts: new PtsCounter({
						Healer: sum19heal,
						Collector: sum69col,
					}),
				}),
				want19: new OrderItem({
					Kind: KindPoints,
					Mode: Hm1_9,
					PriceDur: LeechPriceDurTable.Ironman19(),
					Count: 1,
					Roles: new RoleSet(Healer),
					ChargesConsumed: 0,
					PtsGained: new PtsCounter({ Healer: sum19heal }),
					PtsWaves: new PtsCounter({ Healer: 9 }),
					SpareWaves: 0,
				}),
				want69: new OrderItem({
					Kind: KindPoints,
					Mode: Hm6_9,
					PriceDur: LeechPriceDurTable.Hm69Pts(),
					Count: 1,
					Roles: new RoleSet(Collector),
					ChargesConsumed: 0,
					PtsGained: new PtsCounter({ Collector: sum69col }),
					PtsWaves: new PtsCounter({ Collector: 4 }),
					SpareWaves: 0,
				}),
			},
			{
				name: "1-9 att, 6-9 def, enh",
				req: new Request({
					Ironman: true,
					Progress: ProgressHM1,
					Charges: 13,
					Pts: new PtsCounter({
						Attacker: sum19att * 2,
						Defender: sum69def * 2,
					}),
				}),
				want19: new OrderItem({
					Kind: KindPoints,
					Mode: Hm1_9,
					PriceDur: LeechPriceDurTable.Ironman19(),
					Count: 1,
					Roles: new RoleSet(Attacker),
					ChargesConsumed: 9,
					PtsGained: new PtsCounter({ Attacker: sum19att * 2 }),
					PtsWaves: new PtsCounter({ Attacker: 9 }),
					SpareWaves: 0,
				}),
				want69: new OrderItem({
					Kind: KindPoints,
					Mode: Hm6_9,
					PriceDur: LeechPriceDurTable.Hm69Pts(),
					Count: 1,
					Roles: new RoleSet(Defender),
					ChargesConsumed: 4,
					PtsGained: new PtsCounter({ Defender: sum69def * 2 }),
					PtsWaves: new PtsCounter({ Defender: 4 }),
					SpareWaves: 0,
				}),
			},
			{
				name: "1-9 att, 2 6-9 def",
				req: new Request({
					Ironman: true,
					Progress: ProgressHM1,
					Pts: new PtsCounter({
						Attacker: sum19att,
						Defender: sum69def * 2,
					}),
				}),
				want19: new OrderItem({
					Kind: KindPoints,
					Mode: Hm1_9,
					PriceDur: LeechPriceDurTable.Ironman19(),
					Count: 2,
					Roles: new RoleSet(Attacker, Defender),
					ChargesConsumed: 0,
					PtsGained: new PtsCounter({ Attacker: sum19att, Defender: sum19def }),
					PtsWaves: new PtsCounter({ Attacker: 9, Defender: 9 }),
					SpareWaves: 0,
				}),
				want69: new OrderItem({
					Kind: KindPoints,
					Mode: Hm6_9,
					PriceDur: LeechPriceDurTable.Hm69Pts(),
					Count: 1,
					Roles: new RoleSet(Defender),
					ChargesConsumed: 0,
					PtsGained: new PtsCounter({ Defender: sum69def - hmPts[9][Defender] }),
					PtsWaves: new PtsCounter({ Defender: 3 }),
					SpareWaves: 1,
				}),
			},
			{
				name: "1-9 att, 2 6-9 def, has 1 ticket",
				req: new Request({
					Ironman: true,
					Progress: ProgressHM1,
					Pts: new PtsCounter({
						Attacker: sum19att,
						Defender: sum69def * 2,
					}),
					Hm10Tickets: 1,
				}),
				want19: new OrderItem({
					Kind: KindPoints,
					Mode: Hm1_9,
					PriceDur: LeechPriceDurTable.Ironman19(),
					Count: 1,
					Roles: new RoleSet(Attacker),
					ChargesConsumed: 0,
					PtsGained: new PtsCounter({ Attacker: sum19att }),
					PtsWaves: new PtsCounter({ Attacker: 9 }),
					SpareWaves: 0,
				}),
				want69: new OrderItem({
					Kind: KindPoints,
					Mode: Hm6_9,
					PriceDur: LeechPriceDurTable.Hm69Pts(),
					Count: 2,
					Roles: new RoleSet(Defender),
					ChargesConsumed: 0,
					PtsGained: new PtsCounter({ Defender: 2 * sum69def }),
					PtsWaves: new PtsCounter({ Defender: 8 }),
					SpareWaves: 0,
				}),
			},
			{
				name: "1-9 att, 1 6-9 def, has 1 ticket",
				req: new Request({
					Ironman: true,
					Progress: ProgressHM1,
					Pts: new PtsCounter({
						Attacker: sum19att,
						Defender: sum69def,
					}),
					Hm10Tickets: 1,
				}),
				want19: new OrderItem({
					Kind: KindPoints,
					Mode: Hm1_9,
					PriceDur: LeechPriceDurTable.Ironman19(),
					Count: 1,
					Roles: new RoleSet(Attacker),
					ChargesConsumed: 0,
					PtsGained: new PtsCounter({ Attacker: sum19att }),
					PtsWaves: new PtsCounter({ Attacker: 9 }),
					SpareWaves: 0,
				}),
				want69: new OrderItem({
					Kind: KindPoints,
					Mode: Hm6_9,
					PriceDur: LeechPriceDurTable.Hm69Pts(),
					Count: 1,
					Roles: new RoleSet(Defender),
					ChargesConsumed: 0,
					PtsGained: new PtsCounter({ Defender: sum69def }),
					PtsWaves: new PtsCounter({ Defender: 4 }),
					SpareWaves: 0,
				}),
			},
		];

	tests.forEach(tt => {
		test(tt.name, () => {
			let { item19, item69 } = calcIMRounds(tt.req, 0) //TODO: test king compensation here instead of in Process?
			expect(item19).toEqual(tt.want19)
			expect(item69).toEqual(tt.want69)
		})
	})
});

describe('calcQueens', () => {
	let tests: {
		name: string
		req: Request
		want: OrderItem
	}[] = [
			{
				name: "1 queen",
				req: new Request({
					Queen: 1,
					Charges: 9000,
				}),
				want: new OrderItem({
					Kind: KindQueen,
					Mode: Nm1_10,
					PriceDur: LeechPriceDurTable.Queen(false),
					ChargesConsumed: 0,
					Count: 1,
					Roles: new RoleSet(Collector),
					PtsWaves: new PtsCounter({ Collector: 10 }),
					PtsGained: new PtsCounter({ Attacker: nm10Secondary, Defender: nm10Secondary, Healer: nm10Secondary, Collector: sumnmcol }),
					Queens: 1,
				}),
			},
			{
				name: "5 att pts",
				req: new Request({
					Pts: new PtsCounter({ Attacker: 5 }),
					Queen: 1,
				}),
				want: new OrderItem({
					Kind: KindQueen,
					Mode: Nm1_10,
					PriceDur: LeechPriceDurTable.Queen(false),
					ChargesConsumed: 0,
					Count: 1,
					Roles: new RoleSet(Collector),
					PtsWaves: new PtsCounter({ Collector: 10 }),
					PtsGained: new PtsCounter({ Attacker: nm10Secondary, Defender: nm10Secondary, Healer: nm10Secondary, Collector: sumnmcol }),
					Queens: 1,
				}),
			},
			{
				name: "50 att pts + 1 queen",
				req: new Request({
					Pts: new PtsCounter({ Attacker: 50 }),
					Queen: 1,
				}),
				want: new OrderItem({
					Kind: KindQueen,
					Mode: Nm1_10,
					PriceDur: LeechPriceDurTable.Queen(false),
					ChargesConsumed: 0,
					Count: 1,
					Roles: new RoleSet(Attacker, Collector),
					PtsWaves: new PtsCounter({ Attacker: 1, Collector: 9 }),
					PtsGained: new PtsCounter({ Attacker: nm10Primary, Defender: nm10Secondary, Healer: nm10Secondary, Collector: sumnm19col + nm10Secondary }),
					Queens: 1,
				}),
			},
			{
				name: "50 att pts + 10 queens",
				req: new Request({
					Pts: new PtsCounter({ Attacker: 50 }),
					Queen: 10,
				}),
				want: new OrderItem({
					Kind: KindQueen,
					Mode: Nm1_10,
					PriceDur: LeechPriceDurTable.Queen(false),
					ChargesConsumed: 0,
					Count: 10,
					Roles: new RoleSet(Collector),
					PtsWaves: new PtsCounter({ Collector: 100 }),
					PtsGained: new PtsCounter({ Attacker: nm10Secondary * 10, Defender: nm10Secondary * 10, Healer: nm10Secondary * 10, Collector: sumnmcol * 10 }),
					Queens: 10,
				}),
			},
			{
				name: "50 of each + 5 queens",
				req: new Request({
					Pts: new PtsCounter({ Attacker: 50, Defender: 50, Healer: 50, Collector: 50 }),
					Queen: 5,
				}),
				want: new OrderItem({
					Kind: KindQueen,
					Mode: Nm1_10,
					PriceDur: LeechPriceDurTable.Queen(false),
					ChargesConsumed: 0,
					Count: 5,
					Roles: new RoleSet(Collector, Healer, Defender, Attacker),
					PtsWaves: new PtsCounter({ Attacker: 1, Defender: 1, Healer: 1, Collector: 47 }),
					PtsGained: new PtsCounter({ Attacker: nm10Primary + nm10Secondary * 4, Defender: nm10Primary + nm10Secondary * 4, Healer: nm10Primary + nm10Secondary * 4, Collector: sumnm19col * 5 + nm10Primary * 2 + nm10Secondary * 3 }),
					Queens: 5,
				}),
			},
		];

	tests.forEach(tt => {
		test(tt.name, () => {
			expect(calcQueens(tt.req)).toEqual(tt.want)
		})
	})
});

describe('calcKings', () => {
	let tests: {
		name: string
		req: Request
		want: OrderItem
	}[] = [
			{
				name: "1 king",
				req: new Request({
					King: 1,
				}),
				want: new OrderItem({
					Kind: KindKing,
					Mode: Hm10,
					PriceDur: LeechPriceDurTable.King(false),
					ChargesConsumed: 0,
					Count: 1,
					Roles: new RoleSet(Collector),
					PtsWaves: new PtsCounter({ Collector: 1 }),
					PtsGained: new PtsCounter({ Attacker: hm10Secondary, Defender: hm10Secondary, Healer: hm10Secondary, Collector: hm10Primary }),
					Kings: 1,
				}),
			},
			{
				name: "1 king - don't use enh",
				req: new Request({
					King: 1,
					Charges: 9000,
				}),
				want: new OrderItem({
					Kind: KindKing,
					Mode: Hm10,
					PriceDur: LeechPriceDurTable.King(false),
					ChargesConsumed: 0,
					Count: 1,
					Roles: new RoleSet(Collector),
					PtsWaves: new PtsCounter({ Collector: 1 }),
					PtsGained: new PtsCounter({ Attacker: hm10Secondary, Defender: hm10Secondary, Healer: hm10Secondary, Collector: hm10Primary }),
					Kings: 1,
				}),
			},
			{
				name: "1 king - use enh",
				req: new Request({
					King: 1,
					Charges: 9000,
					Pts: new PtsCounter({
						Attacker: hm10Primary * 2,
					}),
				}),
				want: new OrderItem({
					Kind: KindKing,
					Mode: Hm10,
					PriceDur: LeechPriceDurTable.King(false),
					ChargesConsumed: 4,
					Count: 1,
					Roles: new RoleSet(Attacker),
					PtsWaves: new PtsCounter({ Attacker: 1 }),
					PtsGained: new PtsCounter({ Attacker: hm10Primary * 2, Defender: hm10Secondary * 2, Healer: hm10Secondary * 2, Collector: hm10Secondary * 2 }),
					Kings: 1,
				}),
			},
			{
				name: "1 king + 10k xp - use enh",
				req: new Request({
					King: 2,
					Charges: 9000,
					Pts: new PtsCounter({
						Attacker: hm10Primary * 2,
					}),
					Bxp: new BxpCounter({
						Agility: 10000,
					}),
				}),
				want: new OrderItem({
					Kind: KindKing,
					Mode: Hm10,
					PriceDur: LeechPriceDurTable.King(false),
					ChargesConsumed: 4,
					Count: 2,
					Roles: new RoleSet(Attacker, Collector),
					PtsWaves: new PtsCounter({ Attacker: 1 }),
					PtsGained: new PtsCounter({ Attacker: hm10Primary * 2, Defender: hm10Secondary * 2, Healer: hm10Secondary * 2, Collector: hm10Secondary * 2 }),
					BxpWaves: new BxpCounter({ Agility: 1 }),
					BxpGained: new BxpCounter({ Agility: hmXp[10][Agility] }),
					Kings: 2,
				}),
			},
			{
				name: "15 att pts + 1 king",
				req: new Request({
					Pts: new PtsCounter({ Attacker: 15 }),
					King: 1,
				}),
				want: new OrderItem({
					Kind: KindKing,
					Mode: Hm10,
					PriceDur: LeechPriceDurTable.King(false),
					Count: 1,
					Roles: new RoleSet(Collector),
					PtsWaves: new PtsCounter({ Collector: 1 }),
					PtsGained: new PtsCounter({ Attacker: hm10Secondary, Defender: hm10Secondary, Healer: hm10Secondary, Collector: hm10Primary }),
					Kings: 1,
				}),
			},
			{
				name: "15 att pts + 1 king - enh",
				req: new Request({
					Pts: new PtsCounter({ Attacker: 15 }),
					King: 1,
					Charges: 9000,
				}),
				want: new OrderItem({
					Kind: KindKing,
					Mode: Hm10,
					PriceDur: LeechPriceDurTable.King(false),
					Count: 1,
					Roles: new RoleSet(Collector),
					PtsWaves: new PtsCounter({ Collector: 1 }),
					PtsGained: new PtsCounter({ Attacker: hm10Secondary, Defender: hm10Secondary, Healer: hm10Secondary, Collector: hm10Primary }),
					Kings: 1,
				}),
			},
			{
				name: "50 att pts + 1 king",
				req: new Request({
					Pts: new PtsCounter({ Attacker: 50 }),
					King: 1,
				}),
				want: new OrderItem({
					Kind: KindKing,
					Mode: Hm10,
					PriceDur: LeechPriceDurTable.King(false),
					ChargesConsumed: 0,
					Count: 1,
					Roles: new RoleSet(Attacker),
					PtsWaves: new PtsCounter({ Attacker: 1 }),
					PtsGained: new PtsCounter({ Attacker: hm10Primary, Defender: hm10Secondary, Healer: hm10Secondary, Collector: hm10Secondary }),
					Kings: 1,
				}),
			},
			{
				name: "50 att pts + 1 king - enh",
				req: new Request({
					Pts: new PtsCounter({ Attacker: 50 }),
					King: 1,
					Charges: 9000,
				}),
				want: new OrderItem({
					Kind: KindKing,
					Mode: Hm10,
					PriceDur: LeechPriceDurTable.King(false),
					ChargesConsumed: 0,
					Count: 1,
					Roles: new RoleSet(Attacker),
					PtsWaves: new PtsCounter({ Attacker: 1 }),
					PtsGained: new PtsCounter({ Attacker: hm10Primary, Defender: hm10Secondary, Healer: hm10Secondary, Collector: hm10Secondary }),
					Kings: 1,
				}),
			},
			{
				name: "150 att pts + 10 kings",
				req: new Request({
					Pts: new PtsCounter({ Attacker: 150 }),
					King: 10,
				}),
				want: new OrderItem({
					Kind: KindKing,
					Mode: Hm10,
					PriceDur: LeechPriceDurTable.King(false),
					ChargesConsumed: 0,
					Count: 10,
					Roles: new RoleSet(Collector),
					PtsWaves: new PtsCounter({ Collector: 10 }),
					PtsGained: new PtsCounter({ Attacker: hm10Secondary * 10, Defender: hm10Secondary * 10, Healer: hm10Secondary * 10, Collector: hm10Primary * 10 }),
					Kings: 10,
				}),
			},
			{
				name: "150 att pts + 10 kings - enh",
				req: new Request({
					Pts: new PtsCounter({ Attacker: 150 }),
					King: 10,
					Charges: 9000,
				}),
				want: new OrderItem({
					Kind: KindKing,
					Mode: Hm10,
					PriceDur: LeechPriceDurTable.King(false),
					ChargesConsumed: 0,
					Count: 10,
					Roles: new RoleSet(Collector),
					PtsWaves: new PtsCounter({ Collector: 10 }),
					PtsGained: new PtsCounter({ Attacker: hm10Secondary * 10, Defender: hm10Secondary * 10, Healer: hm10Secondary * 10, Collector: hm10Primary * 10 }),
					Kings: 10,
				}),
			},
			{
				name: "50 of each + 5 kings",
				req: new Request({
					Pts: new PtsCounter({ Attacker: 50, Defender: 50, Healer: 50, Collector: 50 }),
					King: 5,
				}),
				want: new OrderItem({
					Kind: KindKing,
					Mode: Hm10,
					PriceDur: LeechPriceDurTable.King(false),
					ChargesConsumed: 0,
					Count: 5,
					Roles: new RoleSet(Collector),
					PtsWaves: new PtsCounter({ Collector: 5 }),
					PtsGained: new PtsCounter({ Attacker: hm10Secondary * 5, Defender: hm10Secondary * 5, Healer: hm10Secondary * 5, Collector: hm10Primary * 5 }),
					Kings: 5,
				}),
			},
			{
				name: "50 of each + 5 kings - enh",
				req: new Request({
					Pts: new PtsCounter({ Attacker: 50, Defender: 50, Healer: 50, Collector: 50 }),
					King: 5,
					Charges: 9000,
				}),
				want: new OrderItem({
					Kind: KindKing,
					Mode: Hm10,
					PriceDur: LeechPriceDurTable.King(false),
					ChargesConsumed: 0,
					Count: 5,
					Roles: new RoleSet(Collector),
					PtsWaves: new PtsCounter({ Collector: 5 }),
					PtsGained: new PtsCounter({ Attacker: hm10Secondary * 5, Defender: hm10Secondary * 5, Healer: hm10Secondary * 5, Collector: hm10Primary * 5 }),
					Kings: 5,
				}),
			},
			{
				name: "150 of each + 5 kings",
				req: new Request({
					Pts: new PtsCounter({ Attacker: 150, Defender: 150, Healer: 150, Collector: 150 }),
					King: 5,
				}),
				want: new OrderItem({
					Kind: KindKing,
					Mode: Hm10,
					PriceDur: LeechPriceDurTable.King(false),
					ChargesConsumed: 0,
					Count: 5,
					Roles: new RoleSet(Collector, Healer, Defender, Attacker),
					PtsWaves: new PtsCounter({ Attacker: 1, Defender: 1, Healer: 1, Collector: 2 }),
					PtsGained: new PtsCounter({ Attacker: hm10Secondary * 4 + hm10Primary, Defender: hm10Secondary * 4 + hm10Primary, Healer: hm10Secondary * 4 + hm10Primary, Collector: hm10Secondary * 3 + hm10Primary * 2 }),
					Kings: 5,
				}),
			},
			{
				name: "150 of each + 5 kings - enh",
				req: new Request({
					Pts: new PtsCounter({ Attacker: 150, Defender: 150, Healer: 150, Collector: 150 }),
					King: 5,
					Charges: 9000,
				}),
				want: new OrderItem({
					Kind: KindKing,
					Mode: Hm10,
					PriceDur: LeechPriceDurTable.King(false),
					ChargesConsumed: 0,
					Count: 5,
					Roles: new RoleSet(Collector, Healer, Defender, Attacker),
					PtsWaves: new PtsCounter({ Attacker: 1, Defender: 1, Healer: 1, Collector: 2 }),
					PtsGained: new PtsCounter({ Attacker: hm10Secondary * 4 + hm10Primary, Defender: hm10Secondary * 4 + hm10Primary, Healer: hm10Secondary * 4 + hm10Primary, Collector: hm10Secondary * 3 + hm10Primary * 2 }),
					Kings: 5,
				}),
			},
			{
				name: "15 att + 10 kings + 10k bxp",
				req: new Request({
					Pts: new PtsCounter({ Attacker: 15 }),
					Bxp: new BxpCounter({ Agility: 10000 }),
					King: 10,
					Charges: 9000,
				}),
				want: new OrderItem({
					Kind: KindKing,
					Mode: Hm10,
					PriceDur: LeechPriceDurTable.King(false),
					ChargesConsumed: 0,
					Count: 10,
					Roles: new RoleSet(Collector),
					PtsWaves: new PtsCounter({ Collector: 9 }),
					PtsGained: new PtsCounter({ Attacker: hm10Secondary * 9, Defender: hm10Secondary * 9, Healer: hm10Secondary * 9, Collector: hm10Primary * 9 }),
					BxpGained: new BxpCounter({ Agility: hmXp[10][Agility] }),
					BxpWaves: new BxpCounter({ Agility: 1 }),
					Kings: 10,
				}),
			},
			{
				name: "150 att + 10 kings + 10k bxp",
				req: new Request({
					Pts: new PtsCounter({ Attacker: 150 }),
					Bxp: new BxpCounter({ Agility: 10000 }),
					King: 10,
					Charges: 9000,
				}),
				want: new OrderItem({
					Kind: KindKing,
					Mode: Hm10,
					PriceDur: LeechPriceDurTable.King(false),
					ChargesConsumed: 0,
					Count: 10,
					Roles: new RoleSet(Attacker, Collector),
					PtsWaves: new PtsCounter({ Attacker: 1, Collector: 8 }),
					PtsGained: new PtsCounter({ Attacker: hm10Secondary * 8 + hm10Primary, Defender: hm10Secondary * 9, Healer: hm10Secondary * 9, Collector: hm10Secondary + hm10Primary * 8 }),
					BxpGained: new BxpCounter({ Agility: hmXp[10][Agility] }),
					BxpWaves: new BxpCounter({ Agility: 1 }),
					Kings: 10,
				}),
			},
			{
				name: "135 att + 10 kings + 10k bxp",
				req: new Request({
					Pts: new PtsCounter({ Attacker: 135 }),
					Bxp: new BxpCounter({ Agility: 10000 }),
					King: 10,
					Charges: 9000,
				}),
				want: new OrderItem({
					Kind: KindKing,
					Mode: Hm10,
					PriceDur: LeechPriceDurTable.King(false),
					ChargesConsumed: 0,
					Count: 10,
					Roles: new RoleSet(Collector),
					PtsWaves: new PtsCounter({ Collector: 9 }),
					PtsGained: new PtsCounter({ Attacker: hm10Secondary * 9, Defender: hm10Secondary * 9, Healer: hm10Secondary * 9, Collector: hm10Primary * 9 }),
					BxpGained: new BxpCounter({ Agility: hmXp[10][Agility] }),
					BxpWaves: new BxpCounter({ Agility: 1 }),
					Kings: 10,
				}),
			},
			{
				name: "135 ea + 10 kings + 10k bxp",
				req: new Request({
					Pts: new PtsCounter({ Attacker: 135, Defender: 135, Healer: 135, Collector: 135 }),
					Bxp: new BxpCounter({ Agility: 10000 }),
					King: 10,
					Charges: 9000,
				}),
				want: new OrderItem({
					Kind: KindKing,
					Mode: Hm10,
					PriceDur: LeechPriceDurTable.King(false),
					ChargesConsumed: 0,
					Count: 10,
					Roles: new RoleSet(Collector),
					PtsWaves: new PtsCounter({ Collector: 9 }),
					PtsGained: new PtsCounter({ Attacker: hm10Secondary * 9, Defender: hm10Secondary * 9, Healer: hm10Secondary * 9, Collector: hm10Primary * 9 }),
					BxpGained: new BxpCounter({ Agility: hmXp[10][Agility] }),
					BxpWaves: new BxpCounter({ Agility: 1 }),
					Kings: 10,
				}),
			},
			{
				name: "1 king + 10k bxp",
				req: new Request({
					Bxp: new BxpCounter({ Agility: 10000 }),
					King: 1,
				}),
				want: new OrderItem({
					Kind: KindKing,
					Mode: Hm10,
					PriceDur: LeechPriceDurTable.King(false),
					ChargesConsumed: 0,
					Count: 1,
					Roles: new RoleSet(Collector),
					BxpGained: new BxpCounter({ Agility: hmXp[10][Agility] }),
					BxpWaves: new BxpCounter({ Agility: 1 }),
					Kings: 1,
				}),
			},
			{
				name: "10 king + 974020 bxp",
				req: new Request({
					Bxp: new BxpCounter({ Agility: 974020 }),
					King: 10,
				}),
				want: new OrderItem({
					Kind: KindKing,
					Mode: Hm10,
					PriceDur: LeechPriceDurTable.King(false),
					ChargesConsumed: 0,
					Count: 10,
					Roles: new RoleSet(Collector),
					BxpGained: new BxpCounter({ Agility: 10 * hmXp[10][Agility] }),
					BxpWaves: new BxpCounter({ Agility: 10 }),
					Kings: 10,
				}),
			},
			{
				name: "15 att + 10 king + 974020 bxp",
				req: new Request({
					Pts: new PtsCounter({ Attacker: 15 }),
					Bxp: new BxpCounter({ Agility: 974020 }),
					King: 10,
				}),
				want: new OrderItem({
					Kind: KindKing,
					Mode: Hm10,
					PriceDur: LeechPriceDurTable.King(false),
					ChargesConsumed: 0,
					Count: 10,
					Roles: new RoleSet(Collector),
					PtsGained: new PtsCounter({ Attacker: hm10Secondary * 10, Defender: hm10Secondary * 10, Healer: hm10Secondary * 10, Collector: hm10Primary * 10 }),
					PtsWaves: new PtsCounter({ Collector: 10 }),
					BxpGained: new BxpCounter({ Agility: 0 }),
					BxpWaves: new BxpCounter({ Agility: 0 }),
					Kings: 10,
				}),
			},
			{
				name: "10 king + 10k bxp",
				req: new Request({
					Bxp: new BxpCounter({ Agility: 10000 }),
					King: 10,
				}),
				want: new OrderItem({
					Kind: KindKing,
					Mode: Hm10,
					PriceDur: LeechPriceDurTable.King(false),
					ChargesConsumed: 0,
					Count: 10,
					Roles: new RoleSet(Collector),
					PtsWaves: new PtsCounter({ Collector: 9 }),
					PtsGained: new PtsCounter({ Attacker: hm10Secondary * 9, Defender: hm10Secondary * 9, Healer: hm10Secondary * 9, Collector: hm10Primary * 9 }),
					BxpGained: new BxpCounter({ Agility: hmXp[10][Agility] }),
					BxpWaves: new BxpCounter({ Agility: 1 }),
					Kings: 10,
				}),
			},
		];

	tests.forEach(tt => {
		test(tt.name, () => {
			expect(calcKings(tt.req)).toEqual(tt.want)
		})
	})
});

describe('Process', () => {
	type test = {
		name: string
		req: Request
		want: Order
		wantErr: Error
	}

	let execute = function (tt: test): () => void {
		return () => {
			let { order, error } = Process(tt.req)
			expect(order).toEqual(tt.want)
			expect(error).toEqual(tt.wantErr)
		}
	}

	describe("general", () => {
		let tests: test[] = [
			{
				name: "empty",
				req: new Request({
					Progress: ProgressNM1,
				}),
				want: new Order(),
				wantErr: ErrEmpty,
			},
		];
		tests.forEach(tt => {
			test(tt.name, execute(tt))
		})
	})

	describe("comp", () => {
		let tests: test[] = [
			{
				name: "ProgressNM1",
				req: new Request({ Progress: ProgressNM1, Queen: 1 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM1,
						Queen: 0,
						Pts: new PtsCounter({ Attacker: -nm10Secondary, Defender: -nm10Secondary, Healer: -nm10Secondary, Collector: -sumnmcol }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: nm10Secondary, Defender: nm10Secondary, Healer: nm10Secondary, Collector: sumnmcol }),
							PtsWaves: new PtsCounter({ Collector: 10 }),
							Queens: 1,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressNM1 - IM",
				req: new Request({ Progress: ProgressNM1, Ironman: true, Queen: 1 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM1,
						Ironman: true,
						Queen: 0,
						Pts: new PtsCounter({ Attacker: -nm10Secondary, Defender: -nm10Secondary, Healer: -nm10Secondary, Collector: -sumnmcol }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: nm10Secondary, Defender: nm10Secondary, Healer: nm10Secondary, Collector: sumnmcol }),
							PtsWaves: new PtsCounter({ Collector: 10 }),
							Queens: 1,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
		];
		tests.forEach(tt => {
			test(tt.name, execute(tt))
		});
	})

	describe("queen", () => {
		let tests: test[] = [
			{
				name: "ProgressNM1",
				req: new Request({ Progress: ProgressNM1, Queen: 1 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM1,
						Queen: 0,
						Pts: new PtsCounter({ Attacker: -nm10Secondary, Defender: -nm10Secondary, Healer: -nm10Secondary, Collector: -sumnmcol }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: nm10Secondary, Defender: nm10Secondary, Healer: nm10Secondary, Collector: sumnmcol }),
							PtsWaves: new PtsCounter({ Collector: 10 }),
							Queens: 1,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressNM1 - IM",
				req: new Request({ Progress: ProgressNM1, Ironman: true, Queen: 1 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM1,
						Ironman: true,
						Queen: 0,
						Pts: new PtsCounter({ Attacker: -nm10Secondary, Defender: -nm10Secondary, Healer: -nm10Secondary, Collector: -sumnmcol }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: nm10Secondary, Defender: nm10Secondary, Healer: nm10Secondary, Collector: sumnmcol }),
							PtsWaves: new PtsCounter({ Collector: 10 }),
							Queens: 1,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM1",
				req: new Request({ Progress: ProgressHM1, Queen: 1 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM1,
						Queen: 0,
						Pts: new PtsCounter({ Attacker: -nm10Secondary, Defender: -nm10Secondary, Healer: -nm10Secondary, Collector: -sumnmcol }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: nm10Secondary, Defender: nm10Secondary, Healer: nm10Secondary, Collector: sumnmcol }),
							PtsWaves: new PtsCounter({ Collector: 10 }),
							Queens: 1,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM1 - IM",
				req: new Request({ Progress: ProgressHM1, Ironman: true, Queen: 1 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM1,
						Ironman: true,
						Queen: 0,
						Pts: new PtsCounter({ Attacker: -nm10Secondary, Defender: -nm10Secondary, Healer: -nm10Secondary, Collector: -sumnmcol }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: nm10Secondary, Defender: nm10Secondary, Healer: nm10Secondary, Collector: sumnmcol }),
							PtsWaves: new PtsCounter({ Collector: 10 }),
							Queens: 1,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM6",
				req: new Request({ Progress: ProgressHM6, Queen: 1 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM6,
						Queen: 0,
						Pts: new PtsCounter({ Attacker: -nm10Secondary, Defender: -nm10Secondary, Healer: -nm10Secondary, Collector: -sumnmcol }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: nm10Secondary, Defender: nm10Secondary, Healer: nm10Secondary, Collector: sumnmcol }),
							PtsWaves: new PtsCounter({ Collector: 10 }),
							Queens: 1,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM6 - IM",
				req: new Request({ Progress: ProgressHM6, Ironman: true, Queen: 1 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM6,
						Ironman: true,
						Queen: 0,
						Pts: new PtsCounter({ Attacker: -nm10Secondary, Defender: -nm10Secondary, Healer: -nm10Secondary, Collector: -sumnmcol }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: nm10Secondary, Defender: nm10Secondary, Healer: nm10Secondary, Collector: sumnmcol }),
							PtsWaves: new PtsCounter({ Collector: 10 }),
							Queens: 1,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM10",
				req: new Request({ Progress: ProgressHM10, Queen: 1 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						Queen: 0,
						Pts: new PtsCounter({ Attacker: -nm10Secondary, Defender: -nm10Secondary, Healer: -nm10Secondary, Collector: -sumnmcol }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: nm10Secondary, Defender: nm10Secondary, Healer: nm10Secondary, Collector: sumnmcol }),
							PtsWaves: new PtsCounter({ Collector: 10 }),
							Queens: 1,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM10 - IM",
				req: new Request({ Progress: ProgressHM10, Ironman: true, Queen: 1 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						Ironman: true,
						Queen: 0,
						Pts: new PtsCounter({ Attacker: -nm10Secondary, Defender: -nm10Secondary, Healer: -nm10Secondary, Collector: -sumnmcol }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: nm10Secondary, Defender: nm10Secondary, Healer: nm10Secondary, Collector: sumnmcol }),
							PtsWaves: new PtsCounter({ Collector: 10 }),
							Queens: 1,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
		];

		tests.forEach(tt => {
			test(tt.name, execute(tt))
		})
	})

	describe("multiple queens", () => {
		let tests: test[] = [
			{
				name: "ProgressNM1",
				req: new Request({ Progress: ProgressNM1, Queen: 2 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM1,
						Queen: 0,
						Pts: new PtsCounter({ Attacker: -2 * nm10Secondary, Defender: -2 * nm10Secondary, Healer: -2 * nm10Secondary, Collector: -sumnmcol * 2 }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: nm10Secondary * 2, Defender: nm10Secondary * 2, Healer: nm10Secondary * 2, Collector: sumnmcol * 2 }),
							PtsWaves: new PtsCounter({ Collector: 20 }),
							Queens: 2,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressNM1 - IM",
				req: new Request({ Progress: ProgressNM1, Ironman: true, Queen: 2 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM1,
						Ironman: true,
						Queen: 0,
						Pts: new PtsCounter({ Attacker: -2 * nm10Secondary, Defender: -2 * nm10Secondary, Healer: -2 * nm10Secondary, Collector: -sumnmcol * 2 }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: nm10Secondary * 2, Defender: nm10Secondary * 2, Healer: nm10Secondary * 2, Collector: sumnmcol * 2 }),
							PtsWaves: new PtsCounter({ Collector: 20 }),
							Queens: 2,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM1",
				req: new Request({ Progress: ProgressHM1, Queen: 2 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM1,
						Queen: 0,
						Pts: new PtsCounter({ Attacker: -2 * nm10Secondary, Defender: -2 * nm10Secondary, Healer: -2 * nm10Secondary, Collector: -2 * sumnmcol }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * nm10Secondary, Defender: 2 * nm10Secondary, Healer: 2 * nm10Secondary, Collector: 2 * sumnmcol }),
							PtsWaves: new PtsCounter({ Collector: 20 }),
							Queens: 2,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM1 - IM",
				req: new Request({ Progress: ProgressHM1, Ironman: true, Queen: 2 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM1,
						Ironman: true,
						Queen: 0,
						Pts: new PtsCounter({ Attacker: -2 * nm10Secondary, Defender: -2 * nm10Secondary, Healer: -2 * nm10Secondary, Collector: -2 * sumnmcol }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * nm10Secondary, Defender: 2 * nm10Secondary, Healer: 2 * nm10Secondary, Collector: 2 * sumnmcol }),
							PtsWaves: new PtsCounter({ Collector: 20 }),
							Queens: 2,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM6",
				req: new Request({ Progress: ProgressHM6, Queen: 2 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM6,
						Queen: 0,
						Pts: new PtsCounter({ Attacker: -2 * nm10Secondary, Defender: -2 * nm10Secondary, Healer: -2 * nm10Secondary, Collector: -2 * sumnmcol }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * nm10Secondary, Defender: 2 * nm10Secondary, Healer: 2 * nm10Secondary, Collector: 2 * sumnmcol }),
							PtsWaves: new PtsCounter({ Collector: 20 }),
							Queens: 2,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM6 - IM",
				req: new Request({ Progress: ProgressHM6, Ironman: true, Queen: 2 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM6,
						Ironman: true,
						Queen: 0,
						Pts: new PtsCounter({ Attacker: -2 * nm10Secondary, Defender: -2 * nm10Secondary, Healer: -2 * nm10Secondary, Collector: -2 * sumnmcol }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * nm10Secondary, Defender: 2 * nm10Secondary, Healer: 2 * nm10Secondary, Collector: 2 * sumnmcol }),
							PtsWaves: new PtsCounter({ Collector: 20 }),
							Queens: 2,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM10",
				req: new Request({ Progress: ProgressHM10, Queen: 2 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						Queen: 0,
						Pts: new PtsCounter({ Attacker: -2 * nm10Secondary, Defender: -2 * nm10Secondary, Healer: -2 * nm10Secondary, Collector: -2 * sumnmcol }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * nm10Secondary, Defender: 2 * nm10Secondary, Healer: 2 * nm10Secondary, Collector: 2 * sumnmcol }),
							PtsWaves: new PtsCounter({ Collector: 20 }),
							Queens: 2,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM10 - IM",
				req: new Request({ Progress: ProgressHM10, Ironman: true, Queen: 2 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						Ironman: true,
						Queen: 0,
						Pts: new PtsCounter({ Attacker: -2 * nm10Secondary, Defender: -2 * nm10Secondary, Healer: -2 * nm10Secondary, Collector: -2 * sumnmcol }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * nm10Secondary, Defender: 2 * nm10Secondary, Healer: 2 * nm10Secondary, Collector: 2 * sumnmcol }),
							PtsWaves: new PtsCounter({ Collector: 20 }),
							Queens: 2,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
		];

		tests.forEach(tt => {
			test(tt.name, execute(tt))
		})
	})

	describe("king", () => {
		let tests: test[] = [
			{
				name: "ProgressNM1",
				req: new Request({ Progress: ProgressNM1, King: 1 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						Queen: 0,
						King: 0,
						Pts: new PtsCounter({ Attacker: -nm10Secondary - hm10Secondary, Defender: -nm10Secondary - hm10Secondary, Healer: -nm10Secondary - hm10Secondary, Collector: -sumnmcol - sum19col - hm10Primary }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: nm10Secondary, Defender: nm10Secondary, Healer: nm10Secondary, Collector: sumnmcol }),
							PtsWaves: new PtsCounter({ Collector: 10 }),
							Queens: 1,
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindHM10Unlock,
							Mode: Hm1_9,
							PriceDur: LeechPriceDurTable.HmUnlock(),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: sum19col }),
							PtsWaves: new PtsCounter({ Collector: 9 }),
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindKing,
							Mode: Hm10,
							PriceDur: LeechPriceDurTable.King(false),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: hm10Secondary, Defender: hm10Secondary, Healer: hm10Secondary, Collector: hm10Primary }),
							PtsWaves: new PtsCounter({ Collector: 1 }),
							Kings: 1,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressNM1 - IM",
				req: new Request({ Progress: ProgressNM1, Ironman: true, King: 1 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						Ironman: true,
						Queen: 0,
						King: 0,
						Pts: new PtsCounter({ Attacker: -nm10Secondary - hm10Secondary, Defender: -nm10Secondary - hm10Secondary, Healer: -nm10Secondary - hm10Secondary, Collector: -sumnmcol - sum19col - hm10Primary }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: nm10Secondary, Defender: nm10Secondary, Healer: nm10Secondary, Collector: sumnmcol }),
							PtsWaves: new PtsCounter({ Collector: 10 }),
							Queens: 1,
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindHM10Unlock,
							Mode: Hm1_9,
							PriceDur: LeechPriceDurTable.HmUnlock(),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: sum19col }),
							PtsWaves: new PtsCounter({ Collector: 9 }),
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindKing,
							Mode: Hm10,
							PriceDur: LeechPriceDurTable.King(false),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: hm10Secondary, Defender: hm10Secondary, Healer: hm10Secondary, Collector: hm10Primary }),
							PtsWaves: new PtsCounter({ Collector: 1 }),
							Kings: 1,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM1",
				req: new Request({ Progress: ProgressHM1, King: 1 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						King: 0,
						Pts: new PtsCounter({ Attacker: -hm10Secondary, Defender: -hm10Secondary, Healer: -hm10Secondary, Collector: -sum19col - hm10Primary }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindHM10Unlock,
							Mode: Hm1_9,
							PriceDur: LeechPriceDurTable.HmUnlock(),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: sum19col }),
							PtsWaves: new PtsCounter({ Collector: 9 }),
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindKing,
							Mode: Hm10,
							PriceDur: LeechPriceDurTable.King(false),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: hm10Secondary, Defender: hm10Secondary, Healer: hm10Secondary, Collector: hm10Primary }),
							PtsWaves: new PtsCounter({ Collector: 1 }),
							Kings: 1,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM1 - IM",
				req: new Request({ Progress: ProgressHM1, Ironman: true, King: 1 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						Ironman: true,
						King: 0,
						Pts: new PtsCounter({ Attacker: -hm10Secondary, Defender: -hm10Secondary, Healer: -hm10Secondary, Collector: -sum19col - hm10Primary }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindHM10Unlock,
							Mode: Hm1_9,
							PriceDur: LeechPriceDurTable.HmUnlock(),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: sum19col }),
							PtsWaves: new PtsCounter({ Collector: 9 }),
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindKing,
							Mode: Hm10,
							PriceDur: LeechPriceDurTable.King(false),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: hm10Secondary, Defender: hm10Secondary, Healer: hm10Secondary, Collector: hm10Primary }),
							PtsWaves: new PtsCounter({ Collector: 1 }),
							Kings: 1,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM6",
				req: new Request({ Progress: ProgressHM6, King: 1 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						King: 0,
						Pts: new PtsCounter({ Attacker: -hm10Secondary, Defender: -hm10Secondary, Healer: -hm10Secondary, Collector: -sum69col - hm10Primary }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindHM10Unlock,
							Mode: Hm6_9,
							PriceDur: LeechPriceDurTable.HmUnlock69(),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: sum69col }),
							PtsWaves: new PtsCounter({ Collector: 4 }),
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindKing,
							Mode: Hm10,
							PriceDur: LeechPriceDurTable.King(false),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: hm10Secondary, Defender: hm10Secondary, Healer: hm10Secondary, Collector: hm10Primary }),
							PtsWaves: new PtsCounter({ Collector: 1 }),
							Kings: 1,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM6 - IM",
				req: new Request({ Progress: ProgressHM6, Ironman: true, King: 1 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						Ironman: true,
						King: 0,
						Pts: new PtsCounter({ Attacker: -hm10Secondary, Defender: -hm10Secondary, Healer: -hm10Secondary, Collector: -sum69col - hm10Primary }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindHM10Unlock,
							Mode: Hm6_9,
							PriceDur: LeechPriceDurTable.HmUnlock69(),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: sum69col }),
							PtsWaves: new PtsCounter({ Collector: 4 }),
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindKing,
							Mode: Hm10,
							PriceDur: LeechPriceDurTable.King(false),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: hm10Secondary, Defender: hm10Secondary, Healer: hm10Secondary, Collector: hm10Primary }),
							PtsWaves: new PtsCounter({ Collector: 1 }),
							Kings: 1,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM10",
				req: new Request({ Progress: ProgressHM10, King: 1 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						King: 0,
						Pts: new PtsCounter({ Attacker: -hm10Secondary, Defender: -hm10Secondary, Healer: -hm10Secondary, Collector: -hm10Primary }),
						Hm10Tickets: -1,
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindKing,
							Mode: Hm10,
							PriceDur: LeechPriceDurTable.King(false),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: hm10Secondary, Defender: hm10Secondary, Healer: hm10Secondary, Collector: hm10Primary }),
							PtsWaves: new PtsCounter({ Collector: 1 }),
							Kings: 1,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM10 - IM",
				req: new Request({ Progress: ProgressHM10, Ironman: true, King: 1 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						Ironman: true,
						King: 0,
						Pts: new PtsCounter({ Attacker: -hm10Secondary, Defender: -hm10Secondary, Healer: -hm10Secondary, Collector: -hm10Primary - sum19col }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindTicket,
							Mode: Hm1_9,
							PriceDur: LeechPriceDurTable.Ironman19(),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: sum19col }),
							PtsWaves: new PtsCounter({ Collector: 9 }),
							Kings: 0,
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindKing,
							Mode: Hm10,
							PriceDur: LeechPriceDurTable.King(false),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: hm10Secondary, Defender: hm10Secondary, Healer: hm10Secondary, Collector: hm10Primary }),
							PtsWaves: new PtsCounter({ Collector: 1 }),
							Kings: 1,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM10 - IM - has ticket",
				req: new Request({ Progress: ProgressHM10, Ironman: true, King: 1, Hm10Tickets: 1 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						Ironman: true,
						King: 0,
						Pts: new PtsCounter({ Attacker: -hm10Secondary, Defender: -hm10Secondary, Healer: -hm10Secondary, Collector: -hm10Primary }),
						Hm10Tickets: 0,
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindKing,
							Mode: Hm10,
							PriceDur: LeechPriceDurTable.King(false),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: hm10Secondary, Defender: hm10Secondary, Healer: hm10Secondary, Collector: hm10Primary }),
							PtsWaves: new PtsCounter({ Collector: 1 }),
							Kings: 1,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "points and king - 1",
				req: new Request({
					Progress: ProgressHM10,
					Ironman: true,
					King: 1,
					Charges: 9,
					Pts: new PtsCounter({
						Attacker: 713,
						Defender: 10,
						Healer: 15,
					}),
					Hm10Tickets: 1,
				}),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						Ironman: true,
						Charges: 2,
						King: 0,
						Pts: new PtsCounter({
							Attacker: -43, //TODO: wrong
							Defender: 10 - hm10Secondary * 2,
							Healer: 15 - hm10Secondary * 2,
							Collector: -hm10Secondary * 2,
						}),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindPoints,
							Mode: Hm6_9,
							PriceDur: LeechPriceDurTable.Hm69Pts(),
							Count: 1,
							Roles: new RoleSet(Attacker),
							ChargesConsumed: 3,
							PtsGained: new PtsCounter({ Attacker: 336 }),
							PtsWaves: new PtsCounter({ Attacker: 3 }),
							SpareWaves: 1,
						}),
						new OrderItem({
							Kind: KindKing,
							Mode: Hm10,
							PriceDur: LeechPriceDurTable.King(false),
							Count: 1,
							Roles: new RoleSet(Attacker),
							ChargesConsumed: 4,
							PtsGained: new PtsCounter({ Attacker: hm10Primary * 2, Defender: hm10Secondary * 2, Healer: hm10Secondary * 2, Collector: hm10Secondary * 2 }),
							PtsWaves: new PtsCounter({ Attacker: 1 }),
							Kings: 1,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "points and king - 2",
				req: new Request({
					Progress: ProgressHM10,
					Ironman: true,
					King: 2,
					Charges: 0,
					Pts: new PtsCounter({
						Attacker: 2300,
					}),
					Hm10Tickets: 3,
				}),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						Ironman: true,
						Charges: 0,
						King: 0,
						Pts: new PtsCounter({
							Attacker: -6,
							Defender: -hm10Secondary * 2,
							Healer: -hm10Secondary * 2,
							Collector: -hm10Secondary * 2,
						}),
						Hm10Tickets: 1,
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindPoints,
							Mode: Hm1_9,
							PriceDur: LeechPriceDurTable.Ironman19(),
							Count: 3,
							Roles: new RoleSet(Attacker),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: sum19att * 3 }),
							PtsWaves: new PtsCounter({ Attacker: 9 * 3 }),
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindPoints,
							Mode: Hm6_9,
							PriceDur: LeechPriceDurTable.Hm69Pts(),
							Count: 4,
							Roles: new RoleSet(Attacker),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: sum69att * 3 + hmPts[6][Attacker] + hmPts[7][Attacker] }),
							PtsWaves: new PtsCounter({ Attacker: 3 * 4 + 2 }),
							SpareWaves: 2,
						}),
						new OrderItem({
							Kind: KindKing,
							Mode: Hm10,
							PriceDur: LeechPriceDurTable.King(false),
							Count: 2,
							Roles: new RoleSet(Attacker),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: hm10Primary * 2, Defender: hm10Secondary * 2, Healer: hm10Secondary * 2, Collector: hm10Secondary * 2 }),
							PtsWaves: new PtsCounter({ Attacker: 2 }),
							Kings: 2,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "points and king - 3",
				req: new Request({
					Progress: ProgressHM10,
					Ironman: true,
					King: 2,
					Charges: 0,
					Pts: new PtsCounter({
						Attacker: 2000,
					}),
					Hm10Tickets: 3,
				}),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						Ironman: true,
						Charges: 0,
						King: 0,
						Pts: new PtsCounter({
							Attacker: -17,
							Defender: -hm10Secondary * 2,
							Healer: -hm10Secondary * 2,
							Collector: -hm10Secondary * 2,
						}),
						Hm10Tickets: 0,
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindPoints,
							Mode: Hm1_9,
							PriceDur: LeechPriceDurTable.Ironman19(),
							Count: 2,
							Roles: new RoleSet(Attacker),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: sum19att * 2 }),
							PtsWaves: new PtsCounter({ Attacker: 9 * 2 }),
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindPoints,
							Mode: Hm6_9,
							PriceDur: LeechPriceDurTable.Hm69Pts(),
							Count: 4,
							Roles: new RoleSet(Attacker),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: sum69att * 3 + hmPts[6][Attacker] + hmPts[7][Attacker] + hmPts[8][Attacker] }),
							PtsWaves: new PtsCounter({ Attacker: 3 * 4 + 3 }),
							SpareWaves: 1,
						}),
						new OrderItem({
							Kind: KindKing,
							Mode: Hm10,
							PriceDur: LeechPriceDurTable.King(false),
							Count: 2,
							Roles: new RoleSet(Attacker),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: hm10Primary * 2, Defender: hm10Secondary * 2, Healer: hm10Secondary * 2, Collector: hm10Secondary * 2 }),
							PtsWaves: new PtsCounter({ Attacker: 2 }),
							Kings: 2,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
		];

		tests.forEach(tt => {
			test(tt.name, execute(tt))
		})
	})

	describe("multiple kings", () => {
		let tests: test[] = [
			{
				name: "ProgressNM1",
				req: new Request({ Progress: ProgressNM1, King: 2 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						Queen: 0,
						King: 0,
						Pts: new PtsCounter({ Attacker: -nm10Secondary - hm10Secondary * 2, Defender: -nm10Secondary - hm10Secondary * 2, Healer: -nm10Secondary - hm10Secondary * 2, Collector: -sumnmcol - sum19col - hm10Primary * 2 }),
						Hm10Tickets: -1,
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: nm10Secondary, Defender: nm10Secondary, Healer: nm10Secondary, Collector: sumnmcol }),
							PtsWaves: new PtsCounter({ Collector: 10 }),
							Queens: 1,
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindHM10Unlock,
							Mode: Hm1_9,
							PriceDur: LeechPriceDurTable.HmUnlock(),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: sum19col }),
							PtsWaves: new PtsCounter({ Collector: 9 }),
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindKing,
							Mode: Hm10,
							PriceDur: LeechPriceDurTable.King(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * hm10Secondary, Defender: 2 * hm10Secondary, Healer: 2 * hm10Secondary, Collector: 2 * hm10Primary }),
							PtsWaves: new PtsCounter({ Collector: 2 }),
							Kings: 2,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressNM1 - IM",
				req: new Request({ Progress: ProgressNM1, Ironman: true, King: 2 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						Ironman: true,
						Queen: 0,
						King: 0,
						Pts: new PtsCounter({ Attacker: -nm10Secondary - hm10Secondary * 2, Defender: -nm10Secondary - hm10Secondary * 2, Healer: -nm10Secondary - hm10Secondary * 2, Collector: -sumnmcol - sum19col * 2 - hm10Primary * 2 }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: nm10Secondary, Defender: nm10Secondary, Healer: nm10Secondary, Collector: sumnmcol }),
							PtsWaves: new PtsCounter({ Collector: 10 }),
							Queens: 1,
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindHM10Unlock,
							Mode: Hm1_9,
							PriceDur: LeechPriceDurTable.HmUnlock(),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: sum19col }),
							PtsWaves: new PtsCounter({ Collector: 9 }),
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindTicket,
							Mode: Hm1_9,
							PriceDur: LeechPriceDurTable.Ironman19(),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: sum19col }),
							PtsWaves: new PtsCounter({ Collector: 9 }),
							Kings: 0,
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindKing,
							PriceDur: LeechPriceDurTable.King(false),
							Mode: Hm10,
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * hm10Secondary, Defender: 2 * hm10Secondary, Healer: 2 * hm10Secondary, Collector: 2 * hm10Primary }),
							PtsWaves: new PtsCounter({ Collector: 2 }),
							Kings: 2,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM1",
				req: new Request({ Progress: ProgressHM1, King: 2 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						King: 0,
						Pts: new PtsCounter({ Attacker: -hm10Secondary * 2, Defender: -hm10Secondary * 2, Healer: -hm10Secondary * 2, Collector: -sum19col - hm10Primary * 2 }),
						Hm10Tickets: -1,
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindHM10Unlock,
							Mode: Hm1_9,
							PriceDur: LeechPriceDurTable.HmUnlock(),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: sum19col }),
							PtsWaves: new PtsCounter({ Collector: 9 }),
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindKing,
							PriceDur: LeechPriceDurTable.King(false),
							Mode: Hm10,
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * hm10Secondary, Defender: 2 * hm10Secondary, Healer: 2 * hm10Secondary, Collector: 2 * hm10Primary }),
							PtsWaves: new PtsCounter({ Collector: 2 }),
							Kings: 2,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM1 - IM",
				req: new Request({ Progress: ProgressHM1, Ironman: true, King: 2 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						Ironman: true,
						King: 0,
						Pts: new PtsCounter({ Attacker: -hm10Secondary * 2, Defender: -hm10Secondary * 2, Healer: -hm10Secondary * 2, Collector: -sum19col * 2 - hm10Primary * 2 }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindHM10Unlock,
							Mode: Hm1_9,
							PriceDur: LeechPriceDurTable.HmUnlock(),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: sum19col }),
							PtsWaves: new PtsCounter({ Collector: 9 }),
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindTicket,
							Mode: Hm1_9,
							PriceDur: LeechPriceDurTable.Ironman19(),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: sum19col }),
							PtsWaves: new PtsCounter({ Collector: 9 }),
							Kings: 0,
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindKing,
							Mode: Hm10,
							PriceDur: LeechPriceDurTable.King(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * hm10Secondary, Defender: 2 * hm10Secondary, Healer: 2 * hm10Secondary, Collector: 2 * hm10Primary }),
							PtsWaves: new PtsCounter({ Collector: 2 }),
							Kings: 2,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM6",
				req: new Request({ Progress: ProgressHM6, King: 2 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						King: 0,
						Pts: new PtsCounter({ Attacker: -hm10Secondary * 2, Defender: -hm10Secondary * 2, Healer: -hm10Secondary * 2, Collector: -sum69col - hm10Primary * 2 }),
						Hm10Tickets: -1,
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindHM10Unlock,
							Mode: Hm6_9,
							PriceDur: LeechPriceDurTable.HmUnlock69(),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: sum69col }),
							PtsWaves: new PtsCounter({ Collector: 4 }),
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindKing,
							Mode: Hm10,
							PriceDur: LeechPriceDurTable.King(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * hm10Secondary, Defender: 2 * hm10Secondary, Healer: 2 * hm10Secondary, Collector: 2 * hm10Primary }),
							PtsWaves: new PtsCounter({ Collector: 2 }),
							Kings: 2,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM6 - IM",
				req: new Request({ Progress: ProgressHM6, Ironman: true, King: 2 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						Ironman: true,
						King: 0,
						Pts: new PtsCounter({ Attacker: -hm10Secondary * 2, Defender: -hm10Secondary * 2, Healer: -hm10Secondary * 2, Collector: -sum69col - sum19col - hm10Primary * 2 }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindHM10Unlock,
							Mode: Hm6_9,
							PriceDur: LeechPriceDurTable.HmUnlock69(),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: sum69col }),
							PtsWaves: new PtsCounter({ Collector: 4 }),
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindTicket,
							Mode: Hm1_9,
							PriceDur: LeechPriceDurTable.Ironman19(),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: sum19col }),
							PtsWaves: new PtsCounter({ Collector: 9 }),
							Kings: 0,
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindKing,
							Mode: Hm10,
							PriceDur: LeechPriceDurTable.King(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * hm10Secondary, Defender: 2 * hm10Secondary, Healer: 2 * hm10Secondary, Collector: 2 * hm10Primary }),
							PtsWaves: new PtsCounter({ Collector: 2 }),
							Kings: 2,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM10",
				req: new Request({ Progress: ProgressHM10, King: 2 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						King: 0,
						Pts: new PtsCounter({ Attacker: -hm10Secondary * 2, Defender: -hm10Secondary * 2, Healer: -hm10Secondary * 2, Collector: -hm10Primary * 2 }),
						Hm10Tickets: -2,
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindKing,
							Mode: Hm10,
							PriceDur: LeechPriceDurTable.King(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * hm10Secondary, Defender: 2 * hm10Secondary, Healer: 2 * hm10Secondary, Collector: 2 * hm10Primary }),
							PtsWaves: new PtsCounter({ Collector: 2 }),
							Kings: 2,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM10 - IM",
				req: new Request({ Progress: ProgressHM10, Ironman: true, King: 2 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						Ironman: true,
						King: 0,
						Pts: new PtsCounter({ Attacker: -hm10Secondary * 2, Defender: -hm10Secondary * 2, Healer: -hm10Secondary * 2, Collector: -hm10Primary * 2 - sum19col * 2 }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindTicket,
							Mode: Hm1_9,
							PriceDur: LeechPriceDurTable.Ironman19(),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: 2 * sum19col }),
							PtsWaves: new PtsCounter({ Collector: 18 }),
							Kings: 0,
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindKing,
							Mode: Hm10,
							PriceDur: LeechPriceDurTable.King(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * hm10Secondary, Defender: 2 * hm10Secondary, Healer: 2 * hm10Secondary, Collector: 2 * hm10Primary }),
							PtsWaves: new PtsCounter({ Collector: 2 }),
							Kings: 2,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM10 - IM - 10",
				req: new Request({
					Progress: ProgressHM10,
					Ironman: true,
					Pts: new PtsCounter({
						Attacker: 1800,
					}),
					King: 10,
				}),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						Ironman: true,
						King: 0,
						Pts: new PtsCounter({ Attacker: 1800 - (9 * hm10Primary + hm10Secondary), Defender: -hm10Secondary * 10, Healer: -hm10Secondary * 10, Collector: -9 * hm10Secondary - hm10Primary - 10 * sum19col }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindTicket,
							Mode: Hm1_9,
							PriceDur: LeechPriceDurTable.Ironman19(),
							Count: 10,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: 10 * sum19col }),
							PtsWaves: new PtsCounter({ Collector: 90 }),
							Kings: 0,
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindKing,
							Mode: Hm10,
							PriceDur: LeechPriceDurTable.King(false),
							Count: 10,
							Roles: new RoleSet(Attacker, Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 9 * hm10Primary + hm10Secondary, Defender: 10 * hm10Secondary, Healer: 10 * hm10Secondary, Collector: 9 * hm10Secondary + hm10Primary }),
							PtsWaves: new PtsCounter({ Attacker: 9, Collector: 1 }),
							Kings: 10,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
		];

		tests.forEach(tt => {
			test(tt.name, execute(tt))
		})
	})

	describe("multiple queens & kings", () => {
		let tests: test[] = [
			{
				name: "ProgressNM1",
				req: new Request({ Progress: ProgressNM1, Queen: 2, King: 2 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						Queen: 0,
						King: 0,
						Pts: new PtsCounter({ Attacker: -nm10Secondary * 2 - hm10Secondary * 2, Defender: -nm10Secondary * 2 - hm10Secondary * 2, Healer: -nm10Secondary * 2 - hm10Secondary * 2, Collector: -sumnmcol * 2 - sum19col - hm10Primary * 2 }),
						Hm10Tickets: -1,
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: nm10Secondary * 2, Defender: nm10Secondary * 2, Healer: nm10Secondary * 2, Collector: sumnmcol * 2 }),
							PtsWaves: new PtsCounter({ Collector: 20 }),
							Queens: 2,
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindHM10Unlock,
							Mode: Hm1_9,
							PriceDur: LeechPriceDurTable.HmUnlock(),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: sum19col }),
							PtsWaves: new PtsCounter({ Collector: 9 }),
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindKing,
							Mode: Hm10,
							PriceDur: LeechPriceDurTable.King(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * hm10Secondary, Defender: 2 * hm10Secondary, Healer: 2 * hm10Secondary, Collector: 2 * hm10Primary }),
							PtsWaves: new PtsCounter({ Collector: 2 }),
							Kings: 2,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressNM1 - IM",
				req: new Request({ Progress: ProgressNM1, Ironman: true, Queen: 2, King: 2 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						Ironman: true,
						Queen: 0,
						King: 0,
						Pts: new PtsCounter({ Attacker: -nm10Secondary * 2 - hm10Secondary * 2, Defender: -nm10Secondary * 2 - hm10Secondary * 2, Healer: -nm10Secondary * 2 - hm10Secondary * 2, Collector: -sumnmcol * 2 - sum19col * 2 - hm10Primary * 2 }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: nm10Secondary * 2, Defender: nm10Secondary * 2, Healer: nm10Secondary * 2, Collector: sumnmcol * 2 }),
							PtsWaves: new PtsCounter({ Collector: 20 }),
							Queens: 2,
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindHM10Unlock,
							Mode: Hm1_9,
							PriceDur: LeechPriceDurTable.HmUnlock(),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: sum19col }),
							PtsWaves: new PtsCounter({ Collector: 9 }),
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindTicket,
							Mode: Hm1_9,
							PriceDur: LeechPriceDurTable.Ironman19(),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: sum19col }),
							PtsWaves: new PtsCounter({ Collector: 9 }),
							Kings: 0,
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindKing,
							Mode: Hm10,
							PriceDur: LeechPriceDurTable.King(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * hm10Secondary, Defender: 2 * hm10Secondary, Healer: 2 * hm10Secondary, Collector: 2 * hm10Primary }),
							PtsWaves: new PtsCounter({ Collector: 2 }),
							Kings: 2,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM1",
				req: new Request({ Progress: ProgressHM1, Queen: 2, King: 2 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						Queen: 0,
						King: 0,
						Pts: new PtsCounter({ Attacker: -nm10Secondary * 2 - hm10Secondary * 2, Defender: -nm10Secondary * 2 - hm10Secondary * 2, Healer: -nm10Secondary * 2 - hm10Secondary * 2, Collector: -sumnmcol * 2 - sum19col - hm10Primary * 2 }),
						Hm10Tickets: -1,
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * nm10Secondary, Defender: 2 * nm10Secondary, Healer: 2 * nm10Secondary, Collector: 2 * sumnmcol }),
							PtsWaves: new PtsCounter({ Collector: 20 }),
							Queens: 2,
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindHM10Unlock,
							Mode: Hm1_9,
							PriceDur: LeechPriceDurTable.HmUnlock(),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: sum19col }),
							PtsWaves: new PtsCounter({ Collector: 9 }),
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindKing,
							Mode: Hm10,
							PriceDur: LeechPriceDurTable.King(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * hm10Secondary, Defender: 2 * hm10Secondary, Healer: 2 * hm10Secondary, Collector: 2 * hm10Primary }),
							PtsWaves: new PtsCounter({ Collector: 2 }),
							Kings: 2,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM1 - IM",
				req: new Request({ Progress: ProgressHM1, Ironman: true, Queen: 2, King: 2 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						Ironman: true,
						Queen: 0,
						King: 0,
						Pts: new PtsCounter({ Attacker: -nm10Secondary * 2 - hm10Secondary * 2, Defender: -nm10Secondary * 2 - hm10Secondary * 2, Healer: -nm10Secondary * 2 - hm10Secondary * 2, Collector: -sumnmcol * 2 - sum19col * 2 - hm10Primary * 2 }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * nm10Secondary, Defender: 2 * nm10Secondary, Healer: 2 * nm10Secondary, Collector: 2 * sumnmcol }),
							PtsWaves: new PtsCounter({ Collector: 20 }),
							Queens: 2,
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindHM10Unlock,
							Mode: Hm1_9,
							PriceDur: LeechPriceDurTable.HmUnlock(),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: sum19col }),
							PtsWaves: new PtsCounter({ Collector: 9 }),
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindTicket,
							Mode: Hm1_9,
							PriceDur: LeechPriceDurTable.Ironman19(),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: sum19col }),
							PtsWaves: new PtsCounter({ Collector: 9 }),
							Kings: 0,
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindKing,
							Mode: Hm10,
							PriceDur: LeechPriceDurTable.King(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * hm10Secondary, Defender: 2 * hm10Secondary, Healer: 2 * hm10Secondary, Collector: 2 * hm10Primary }),
							PtsWaves: new PtsCounter({ Collector: 2 }),
							Kings: 2,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM6",
				req: new Request({ Progress: ProgressHM6, Queen: 2, King: 2 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						Queen: 0,
						King: 0,
						Pts: new PtsCounter({ Attacker: -nm10Secondary * 2 - hm10Secondary * 2, Defender: -nm10Secondary * 2 - hm10Secondary * 2, Healer: -nm10Secondary * 2 - hm10Secondary * 2, Collector: -sumnmcol * 2 - sum69col - hm10Primary * 2 }),
						Hm10Tickets: -1,
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * nm10Secondary, Defender: 2 * nm10Secondary, Healer: 2 * nm10Secondary, Collector: 2 * sumnmcol }),
							PtsWaves: new PtsCounter({ Collector: 20 }),
							Queens: 2,
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindHM10Unlock,
							Mode: Hm6_9,
							PriceDur: LeechPriceDurTable.HmUnlock69(),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: sum69col }),
							PtsWaves: new PtsCounter({ Collector: 4 }),
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindKing,
							Mode: Hm10,
							PriceDur: LeechPriceDurTable.King(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * hm10Secondary, Defender: 2 * hm10Secondary, Healer: 2 * hm10Secondary, Collector: 2 * hm10Primary }),
							PtsWaves: new PtsCounter({ Collector: 2 }),
							Kings: 2,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM6 - IM",
				req: new Request({ Progress: ProgressHM6, Ironman: true, Queen: 2, King: 2 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						Ironman: true,
						Queen: 0,
						King: 0,
						Pts: new PtsCounter({ Attacker: -nm10Secondary * 2 - hm10Secondary * 2, Defender: -nm10Secondary * 2 - hm10Secondary * 2, Healer: -nm10Secondary * 2 - hm10Secondary * 2, Collector: -sumnmcol * 2 - sum69col - sum19col - hm10Primary * 2 }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * nm10Secondary, Defender: 2 * nm10Secondary, Healer: 2 * nm10Secondary, Collector: 2 * sumnmcol }),
							PtsWaves: new PtsCounter({ Collector: 20 }),
							Queens: 2,
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindHM10Unlock,
							Mode: Hm6_9,
							PriceDur: LeechPriceDurTable.HmUnlock69(),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: sum69col }),
							PtsWaves: new PtsCounter({ Collector: 4 }),
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindTicket,
							Mode: Hm1_9,
							PriceDur: LeechPriceDurTable.Ironman19(),
							Count: 1,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: sum19col }),
							PtsWaves: new PtsCounter({ Collector: 9 }),
							Kings: 0,
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindKing,
							Mode: Hm10,
							PriceDur: LeechPriceDurTable.King(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * hm10Secondary, Defender: 2 * hm10Secondary, Healer: 2 * hm10Secondary, Collector: 2 * hm10Primary }),
							PtsWaves: new PtsCounter({ Collector: 2 }),
							Kings: 2,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM10",
				req: new Request({ Progress: ProgressHM10, Queen: 2, King: 2 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						Queen: 0,
						King: 0,
						Pts: new PtsCounter({ Attacker: -nm10Secondary * 2 - hm10Secondary * 2, Defender: -nm10Secondary * 2 - hm10Secondary * 2, Healer: -nm10Secondary * 2 - hm10Secondary * 2, Collector: -sumnmcol * 2 - hm10Primary * 2 }),
						Hm10Tickets: -2,
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * nm10Secondary, Defender: 2 * nm10Secondary, Healer: 2 * nm10Secondary, Collector: 2 * sumnmcol }),
							PtsWaves: new PtsCounter({ Collector: 20 }),
							Queens: 2,
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindKing,
							Mode: Hm10,
							PriceDur: LeechPriceDurTable.King(false),
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * hm10Secondary, Defender: 2 * hm10Secondary, Healer: 2 * hm10Secondary, Collector: 2 * hm10Primary }),
							PtsWaves: new PtsCounter({ Collector: 2 }),
							Kings: 2,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "ProgressHM10 - IM",
				req: new Request({ Progress: ProgressHM10, Ironman: true, Queen: 2, King: 2 }),
				want: new Order({
					Request: new Request({
						Progress: ProgressHM10,
						Ironman: true,
						Queen: 0,
						King: 0,
						Pts: new PtsCounter({ Attacker: -nm10Secondary * 2 - hm10Secondary * 2, Defender: -nm10Secondary * 2 - hm10Secondary * 2, Healer: -nm10Secondary * 2 - hm10Secondary * 2, Collector: -sumnmcol * 2 - hm10Primary * 2 - sum19col * 2 }),
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							PriceDur: LeechPriceDurTable.Queen(false),
							Mode: Nm1_10,
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * nm10Secondary, Defender: 2 * nm10Secondary, Healer: 2 * nm10Secondary, Collector: 2 * sumnmcol }),
							PtsWaves: new PtsCounter({ Collector: 20 }),
							Queens: 2,
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindTicket,
							PriceDur: LeechPriceDurTable.Ironman19(),
							Mode: Hm1_9,
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Collector: 2 * sum19col }),
							PtsWaves: new PtsCounter({ Collector: 2 * 9 }),
							Kings: 0,
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindKing,
							PriceDur: LeechPriceDurTable.King(false),
							Mode: Hm10,
							Count: 2,
							Roles: new RoleSet(Collector),
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({ Attacker: 2 * hm10Secondary, Defender: 2 * hm10Secondary, Healer: 2 * hm10Secondary, Collector: 2 * hm10Primary }),
							PtsWaves: new PtsCounter({ Collector: 2 }),
							Kings: 2,
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
		];

		tests.forEach(tt => {
			test(tt.name, execute(tt))
		})
	})

	describe("ironman", () => {
		let tests: test[] = [
			{
				name: "all items - NM1",
				req: new Request({
					Ironman: true,
					Progress: ProgressNM1,
					Charges: 0,
					Pts: new PtsCounter({
						Attacker: 2200,
						Defender: 2200,
						Healer: 2200,
						Collector: 2600,
					}),
					Queen: 8,
				}),
				want: new Order({
					Request: new Request({
						Ironman: true,
						Progress: ProgressHM10,
						Charges: 0,
						Pts: new PtsCounter({
							Attacker: -1,
							Defender: -24,
							Healer: -13,
							Collector: -50,
						}),
						Queen: 0,
						Hm10Tickets: 1,
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Roles: new RoleSet(Collector),
							Count: 8,
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({
								Attacker: 8 * 5,
								Defender: 8 * 5,
								Healer: 8 * 5,
								Collector: 8 * sumnmcol,
							}),
							PtsWaves: new PtsCounter({
								Collector: 8 * 10,
							}),
							SpareWaves: 0,
							Queens: 8,
						}),
						new OrderItem({
							Kind: KindHM10Unlock,
							Mode: Hm1_9,
							PriceDur: LeechPriceDurTable.HmUnlock(),
							Roles: new RoleSet(Attacker),
							Count: 1,
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({
								Attacker: 356,
							}),
							PtsWaves: new PtsCounter({
								Attacker: 9,
							}),
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindPoints,
							Mode: Hm1_9,
							PriceDur: LeechPriceDurTable.Ironman19(),
							Roles: new RoleSet(Attacker, Defender, Healer),
							Count: 12,
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({
								Attacker: 1805,
								Defender: 2184,
								Healer: 697,
							}),
							PtsWaves: new PtsCounter({
								Attacker: 47,
								Defender: 48,
								Healer: 13,
							}),
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindPoints,
							Mode: Hm6_9,
							PriceDur: LeechPriceDurTable.Hm69Pts(),
							Roles: new RoleSet(Healer, Collector),
							Count: 12,
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({
								Healer: 1476,
								Collector: 1346,
							}),
							PtsWaves: new PtsCounter({
								Healer: 21,
								Collector: 27,
							}),
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
			{
				name: "all items - solo - NM1",
				req: new Request({
					Ironman: true,
					Progress: ProgressNM1,
					Charges: 0,
					Pts: new PtsCounter({
						Attacker: 2200,
						Defender: 2200,
						Healer: 2200,
						Collector: 2600,
					}),
					Queen: 8,
					SoloNM: true,
				}),
				want: new Order({
					Request: new Request({
						Ironman: true,
						Progress: ProgressHM10,
						Charges: 0,
						Pts: new PtsCounter({
							Attacker: -1,
							Defender: -24,
							Healer: -13,
							Collector: -50,
						}),
						Queen: 0,
						Hm10Tickets: 1,
					}),
					Breakdown: [
						new OrderItem({
							Kind: KindQueen,
							Mode: Nm1_10,
							PriceDur: LeechPriceDurTable.Queen(false),
							Roles: new RoleSet(Collector),
							Count: 8,
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({
								Attacker: 8 * 5,
								Defender: 8 * 5,
								Healer: 8 * 5,
								Collector: 8 * sumnmcol,
							}),
							PtsWaves: new PtsCounter({
								Collector: 8 * 10,
							}),
							SpareWaves: 0,
							Queens: 8,
						}),
						new OrderItem({
							Kind: KindHM10Unlock,
							Mode: Hm1_9,
							PriceDur: LeechPriceDurTable.HmUnlock(),
							Roles: new RoleSet(Attacker),
							Count: 1,
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({
								Attacker: 356,
							}),
							PtsWaves: new PtsCounter({
								Attacker: 9,
							}),
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindPoints,
							Mode: Hm1_9,
							PriceDur: LeechPriceDurTable.Ironman19(),
							Roles: new RoleSet(Attacker, Defender, Healer),
							Count: 12,
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({
								Attacker: 1805,
								Defender: 2184,
								Healer: 697,
							}),
							PtsWaves: new PtsCounter({
								Attacker: 47,
								Defender: 48,
								Healer: 13,
							}),
							SpareWaves: 0,
						}),
						new OrderItem({
							Kind: KindPoints,
							Mode: Hm6_9,
							PriceDur: LeechPriceDurTable.Hm69Pts(),
							Roles: new RoleSet(Healer, Collector),
							Count: 12,
							ChargesConsumed: 0,
							PtsGained: new PtsCounter({
								Healer: 1476,
								Collector: 1346,
							}),
							PtsWaves: new PtsCounter({
								Healer: 21,
								Collector: 27,
							}),
							SpareWaves: 0,
						}),
					],
				}),
				wantErr: undefined,
			},
		];

		tests.forEach(tt => {
			test(tt.name, execute(tt))
		})
	})

});
